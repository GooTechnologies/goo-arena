{"e3779bd0c62d492ab27085efff232113.entity": {"name": "Player", "license": "CC0", "created": "2014-12-09T10:18:25.531472+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:25.531493+00:00", "dataModelVersion": 2, "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {"51f778ed09324411b3b80c6b087a8339.entity": {"entityRef": "51f778ed09324411b3b80c6b087a8339.entity", "sortValue": 2}, "4457de2688c84dc6ace5570be786cf11.entity": {"entityRef": "4457de2688c84dc6ace5570be786cf11.entity", "sortValue": 1}}}, "meshData": {"shape": "Box", "shapeOptions": {"textureMode": "Uniform"}}}, "hidden": false, "id": "e3779bd0c62d492ab27085efff232113.entity"}, "c152f27ebf2e4a4b90f690921793e1a8.script": {"body": "/*\n\nAsks the user for a name. Signals the mouse script that the\nto lock the mouse as well.\n\n*/\n\n\nvar setup = function(args, ctx, goo) {\n\t\n\tctx.nameInputWrapper = document.getElementById('name-input-wrapper');\n\tctx.nameInput = document.getElementById('name-input');\n\t\n\tctx.initInput = function() {\n\t\tctx.worldData.showStatus('Connected!', 'Enter name and press ENTER');\n\t\t\n\t\tctx.nameInput.value = ctx.worldData.name;\n\t\t// Timeout to make auto-selection work\n\t\tsetTimeout(function() {\n\t\t\tctx.nameInput.focus();\n\t\t\tctx.nameInput.select();\t\n\t\t}, 100);\n\t\t\n\t\tctx.nameInputWrapper.style.width = ctx.domElement.width/window.devicePixelRatio + 'px';\n\t\tctx.nameInputWrapper.style.display = 'block';\n\t};\n\tgoo.SystemBus.addListener('server_init', ctx.initInput);\n\t\n\tctx.windowListeners = {\n\t\tkeyup: function(evt) {\n\t\t\tif (evt.keyCode === 13) { \n\t\t\t\t// ENTER key\n\t\t\t\t\n\t\t\t\tchangeName(ctx, ctx.nameInput.value);\n\t\t\t\tctx.nameInputWrapper.style.display = 'none';\n\t\t\t\tremoveWindowListeners(ctx);\n\t\t\t\t\n\t\t\t\t// Take the opportunity to lock the mouse,\n\t\t\t\t// as this has to happen on a user triggered event\n\t\t\t\tgoo.SystemBus.emit('lock_mouse');\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t};\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\twindow.addEventListener(v, ctx.windowListeners[v]);\n\t});\n\t\n};\n\nvar removeWindowListeners = function(ctx) {\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\twindow.removeEventListener(v, ctx.windowListeners[v]);\n\t});\n\tdelete ctx.windowListeners;\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tgoo.SystemBus.removeListener('server_init', ctx.initInput);\n\tctx.nameInputWrapper.style.display = 'none';\n\tif (ctx.windowListeners) removeWindowListeners(ctx);\n};\n\nvar changeName = function(ctx, name) {\n\tif (ctx.worldData.id !== undefined && ctx.worldData.playersNew !== undefined) {\n\t\tctx.worldData.pushMessage('c_name', name);\n\t}\n};\n", "name": "Name prompt", "license": "CC0", "created": "2014-12-09T10:18:21.919387+00:00", "deleted": false, "modified": "2014-12-09T10:18:21.919411+00:00", "dataModelVersion": 2, "id": "c152f27ebf2e4a4b90f690921793e1a8.script"}, "2c1cc90c68214028a931f7ba3d88c77d.sound": {"name": "own_gun", "license": "CC0", "created": "2014-12-09T10:18:22.543737+00:00", "deleted": false, "audioRefs": {"mp3": "fa1baca4a8742746a050779badc857e8d6a2bde3.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.543758+00:00", "volume": 1, "id": "2c1cc90c68214028a931f7ba3d88c77d.sound", "loop": false}, "bde434d1a7474fa78a9898576763d9a9.script": {"body": "/*\n\n\tShow a score leaderboard. On keypress, but also provide a listener\n\tfor other scripts to call (for example when the player dies).\n\t\n*/\n\n\nvar g;\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\t\n\tctx.scoreOuter = document.getElementById('scores-wrapper');\n\tctx.scoreScreen = document.getElementById('scores-table');\n\t\n\tctx.keyListeners = {\n\t\tkeydown: function(evt) {\n\t\t\tif (evt.keyCode == 81) {\n\t\t\t\tg.SystemBus.emit('show_scores');\n\t\t\t}\n\t\t},\n\t\tkeyup: function(evt) {\n\t\t\tif (evt.keyCode == 81) {\n\t\t\t\tg.SystemBus.emit('hide_scores');\n\t\t\t}\n\t\t}\n\t};\n\t\n\tObject.keys(ctx.keyListeners).forEach(function(v) {\n\t\twindow.addEventListener(v, ctx.keyListeners[v]);\n\t});\n\t\n\tctx.showScores = function() {\n\t\tshowScores(ctx);\n\t};\n\tg.SystemBus.addListener('show_scores', ctx.showScores);\n\t\n\tctx.hideScores = function() {\n\t\thideScores(ctx);\n\t};\n\tg.SystemBus.addListener('hide_scores', ctx.hideScores);\n\t\n\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tg.SystemBus.removeListener('show_scores', ctx.showScores);\n\tg.SystemBus.removeListener('hide_scores', ctx.hideScores);\n\tObject.keys(ctx.keyListeners).forEach(function(v) {\n\t\twindow.removeEventListener(v, ctx.keyListeners[v]);\n\t});\n};\n\nvar hideScores = function(ctx) {\n\tctx.scoreScreen.style.display = 'none';\n};\n\nvar showScores = function(ctx) {\n\tvar playerStats = [];\n\tObject.keys(ctx.worldData.playersNew).forEach(function(v) {\n\t\tplayerStats.push({\n\t\t\tname: ctx.worldData.playersNew[v].name,\n\t\t\tkills: ctx.worldData.playersNew[v].kills,\n\t\t\tdeaths: ctx.worldData.playersNew[v].deaths\n\t\t});\n\t});\n\tplayerStats.sort(function(a,b) {\n\t\treturn (a.kills - b.kills);\n\t});\n\t\n\tclearScores(ctx);\n\tbuildScores(ctx, playerStats);\n\tctx.scoreOuter.style.width = ctx.domElement.width/window.devicePixelRatio + 'px';\n\tctx.scoreScreen.style.display = 'inline-table';\n};\n\nvar buildScores = function(ctx, playerStats) {\n\tplayerStats.forEach(function(v, i) {\n\t\tvar r = ctx.scoreScreen.insertRow(1);\n\t\tr.className = (i % 2 === 0) ? 'even' : 'odd';\n\t\tvar cn = r.insertCell(0);\n\t\tvar ck = r.insertCell(1);\n\t\tvar cd = r.insertCell(2);\n\t\tcn.innerHTML = v.name;\n\t\tck.innerHTML = v.kills;\n\t\tcd.innerHTML = v.deaths;\n\t});\n};\n\nvar clearScores = function(ctx) {\n\tvar i = ctx.scoreScreen.getElementsByTagName('tr').length-1;\n\twhile (i--) {\n\t\tctx.scoreScreen.deleteRow(1);\n\t}\n};", "name": "Score Screen", "license": "CC0", "created": "2014-12-09T10:18:25.242791+00:00", "deleted": false, "modified": "2014-12-09T10:18:25.242820+00:00", "dataModelVersion": 2, "id": "bde434d1a7474fa78a9898576763d9a9.script"}, "56bcb2ca77f145329a11e58f614e78c1.sound": {"name": "Dinosaur Roar-SoundBible.com-605392672", "license": "CC0", "created": "2014-12-09T10:18:22.447928+00:00", "deleted": false, "audioRefs": {"mp3": "a3e8e51f5759f231eaaaf2929cec976505897dfb.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.447956+00:00", "volume": 1, "id": "56bcb2ca77f145329a11e58f614e78c1.sound", "loop": false}, "9a47e72204624330bbb2310567f9f92f.entity": {"name": "Default Lights", "license": "CC0", "created": "2014-12-09T10:18:26.052220+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:26.052243+00:00", "dataModelVersion": 2, "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {"70eddceb62114d30a73248a1e5e9177e.entity": {"entityRef": "70eddceb62114d30a73248a1e5e9177e.entity", "sortValue": 1}, "f5496f62854f4c0fba7f8e6737b8ee18.entity": {"entityRef": "f5496f62854f4c0fba7f8e6737b8ee18.entity", "sortValue": 0}}}}, "hidden": false, "id": "9a47e72204624330bbb2310567f9f92f.entity"}, "652d8234d04840288b221bcdfaa8ea2d.entity": {"name": "Health Bar", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-12-09T10:18:26.579452+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:26.579473+00:00", "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": false, "innerHtml": "<style>\n\t\n\t#health-wrapper {\n\t\tposition: relative;\n\t\twidth: 1000px;\n\t\theight: 20px;\n\t\ttop: 600px;\n\t}\n\n\t#health-outer {\n\t\tposition: relative;\n\t\tmargin: 0 auto;\n\t\twidth: 75%;\n\t\theight: 100%;\n\t\tbackground-color: black;\n\t}\n\t\n\t#health-inner {\n\t\tposition: relative;\n\t\tmargin: 0 auto;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: red;\n\t\tfloat: left;\n\t}\n\t\n</style>\n\n<div id='health-wrapper'>\n\t<div id='health-outer'>\n\t\t<div id='health-inner'>\n\t\t</div>\n\t</div>\n</div>"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}}, "hidden": false, "id": "652d8234d04840288b221bcdfaa8ea2d.entity"}, "3e78a461920f4929889eb8c72556f35b.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "63a6f697e62e887ca54aab6d9b58fa319f7ba611.jpg", "license": "CC0", "flipY": false, "deleted": false, "originalLicense": "CC0", "magFilter": "Bilinear", "created": "2014-12-09T10:18:22.800627+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.800654+00:00", "repeat": [0, 0], "offset": [0, 0], "id": "3e78a461920f4929889eb8c72556f35b.texture", "generateMipmaps": true, "wrapT": "Repeat", "anisotropy": 1, "name": "texture_48"}, "32ca38dbf0e64009ac71e957c6c26ca9.script": {"body": "/*\n\nSimple (and not very efficient) \"particle\" effects using \nentities. A good target for some fancy development!\n\nNow also with lasers!\n\n*/\n\nvar g;\nvar pl;\nvar setup = function(args, ctx, goo) {\n\tconsole.clear();\n\tg = goo;\n\t\n\tctx.lines = [];\n\tpl = goo.PolyLine;\n\t\n\tctx.numTypes = 3;\n\t\n\tctx.BLOOD = 0,\n\tctx.DEATH = 1,\n\tctx.FLASH = 2,\n\t\n\tctx.numEmitters = [5, 3, 5];\n\tctx.numEntities = [5, 15, 5];\n\tctx.activeEmitter = [0, 0, 0];\n\tctx.timeToLive = [0.5, 2, 0.2];\n\tctx.acceleration = [-15, -5, -2];\n\tctx.emitters = [[], [], []];\n\t\n\tctx.meshData = [\n\t\tnew g.Sphere(8, 8, 0.3),\n\t\tnew g.Sphere(8, 8, 0.6),\n\t\tnew g.Sphere(8, 8, 0.2)\n\t];\n\t\n\tctx.materials = [\n\t\tnew g.Material(g.ShaderLib.simpleLit),\n\t\tnew g.Material(g.ShaderLib.simpleLit),\n\t\tnew g.Material(g.ShaderLib.simpleLit)\n\t];\n\t\n\tctx.materials[ctx.BLOOD].uniforms.materialDiffuse = [0.8, 0, 0, 1];\n\tctx.materials[ctx.BLOOD].uniforms.materialSpecular = [0, 0, 0, 0];\n\tctx.materials[ctx.BLOOD].uniforms.materialEmissive = [1, 0, 0, 1];\n\t\n\tctx.materials[ctx.DEATH].uniforms.materialDiffuse = [0, 0, 0, 1];\n\tctx.materials[ctx.DEATH].uniforms.materialSpecular = [0, 0, 0, 0];\n\tctx.materials[ctx.DEATH].uniforms.materialEmissive = [1, 0.5, 0, 0];\n\t\n\tctx.materials[ctx.FLASH].uniforms.materialDiffuse = [1, 1, 0, 1];\n\tctx.materials[ctx.FLASH].uniforms.materialSpecular = [0, 1, 0, 0];\n\tctx.materials[ctx.FLASH].uniforms.materialEmissive = [1, 1, 0, 1];\n\n\tinitEmitters(ctx);\n\t\n\tctx.launchBlood = function(hitData) {\n\t\temit(ctx, ctx.BLOOD, new g.Vector3(hitData.point.x, hitData.point.y, hitData.point.z));\n\t};\n\tg.SystemBus.addListener('hit_target', ctx.launchBlood);\n\tg.SystemBus.addListener('other_hit', ctx.launchBlood);\n\t\n\tctx.launchDeath = function(killData) {\n\t\temit(ctx, ctx.DEATH, new g.Vector3(killData.point.x, killData.point.y, killData.point.z));\n\t};\n\tg.SystemBus.addListener('player_killed', ctx.launchDeath);\n\n\tctx.launchFlash = function(shotData) {\n\t\tvar point = new g.Vector3(shotData.source.x, shotData.source.y, shotData.source.z);\n\t\tvar direction = new g.Vector3(shotData.direction.x, shotData.direction.y, shotData.direction.z);\n\t\tdirection.normalize();\n\t\tpoint.add(direction);\n\t\t//emit(ctx, ctx.FLASH, point);\n\t};\n\tg.SystemBus.addListener('opponent_shot', ctx.launchFlash);\n\t\n\t\n\tctx.lineMaterial = new g.Material(goo.ShaderLib.simpleLit);\n\tctx.lineMaterial.uniforms.materialDiffuse = [0, 1, 0, 1];\n\tctx.lineMaterial.uniforms.materialEmissive = [0, 1, 0, 1];\n    ctx.lineMaterial.cullState.enabled = false;\n    \n    ctx.ttl = 5;\n    ctx.drawLine = function(shotData) {\n\t\tvar point = new g.Vector3(shotData.source.x, shotData.source.y, shotData.source.z);\n\t\t// HACK to make own shots visible (aim height and sphere pos don't match)\n\t\t// TODO less hack\n\t\tif (shotData.shooter < 10000) {\n\t\t\tpoint.sub(new g.Vector3(0, 0.5, 0));\n\t\t}\n\t\tvar target = new g.Vector3(shotData.impact.x, shotData.impact.y, shotData.impact.z);\n\t\tdrawLine(ctx, point, target);\n    };\n    g.SystemBus.addListener('shot', ctx.drawLine);\n    \n};\n\nvar cleanup = function(args, ctx, goo) {\n\tremoveAllEmitters(ctx);\n\tg.SystemBus.removeListener('hit_target', ctx.launchBlood);\n\tg.SystemBus.removeListener('other_hit', ctx.launchBlood);\n\tg.SystemBus.removeListener('player_killed', ctx.launchDeath);\n\tg.SystemBus.removeListener('flash', ctx.launchFlash);\n\tg.SystemBus.removeListener('shot', ctx.drawLine);\n\tctx.lines.forEach(function(v) {\n\t\tv.entity.removeFromWorld();\n\t});\n};\n\nvar initEmitters = function(ctx) {\n\tfor (var i=0; i<ctx.numTypes; i++) {\n\t\tfor (var j=0; j<ctx.numEmitters[i]; j++) {\n\t\t\tvar emitter = {\n\t\t\t\talive: false,\n\t\t\t\ttimeToLive: -1,\n\t\t\t\tentities: initEntities(ctx, i)\n\t\t\t};\n\t\t\tctx.emitters[i].push(emitter);\n\t\t}\n\t}\n\tconsole.log(ctx.emitters);\n};\n\nvar initEntities = function(ctx, type) {\n\tvar e = [];\n\tfor (var i=0; i<ctx.numEntities[type]; i++) {\n\t\te.push(ctx.world.createEntity(ctx.meshData[type], ctx.materials[type]));\n\t}\n\treturn e;\n};\n\nvar emit = function(ctx, type, point) {\n\tctx.emitters[type][ctx.activeEmitter[type]].alive = true;\n\tctx.emitters[type][ctx.activeEmitter[type]].timeToLive = ctx.timeToLive[type];\n\tctx.emitters[type][ctx.activeEmitter[type]].entities.forEach(function(v) {\n\t\tv.setAttribute('velocity', new g.Vector3(\n\t\t\t4*(-0.5+Math.random()), \n\t\t\tMath.random()*5,\n\t\t\t4*(-0.5+Math.random())\n\t\t));\n\t\tv.addToWorld();\n\t\tv.setTranslation(point);\n\t});\n\tctx.activeEmitter[type]++;\n\tctx.activeEmitter[type] %= ctx.numEmitters[type];\n};\n\nvar updateEmitter = function(ctx, type, index) {\n\tif (ctx.emitters[type][index].alive === false) return;\n\tctx.emitters[type][index].timeToLive -= ctx.world.tpf;\n\tif (ctx.emitters[type][index].timeToLive < 0) {\n\t\tremoveEmitter(ctx, type, index);\n\t} else {\n\t\tctx.emitters[type][index].entities.forEach(function(v) {\n\t\t\tvar velocity = v.getAttribute('velocity');\n\t\t\tvelocity.y += ctx.acceleration[type]*ctx.world.tpf;\n\t\t\tv.addTranslation(velocity.x*ctx.world.tpf, velocity.y*ctx.world.tpf, velocity.z*ctx.world.tpf);\n\t\t});\n\t}\n};\n\nvar updateAllEmitters = function(ctx) {\n\tctx.emitters.forEach(function(type, typeIndex) {\n\t\ttype.forEach(function(emitter, emitterIndex) {\n\t\t\tupdateEmitter(ctx, typeIndex, emitterIndex);\n\t\t});\n\t});\n};\n\nvar removeEmitter = function(ctx, type, index) {\n\tvar impactEntities = ctx.emitters[type][index].entities;\n\timpactEntities.forEach(function(v) {\n\t\tv.removeFromWorld();\n\t});\n\tctx.emitters[type][index].alive = false;\n};\n\nvar removeAllEmitters = function(ctx) {\n\tctx.emitters.forEach(function(type, typeIndex) {\n\t\ttype.forEach(function(emitter, emitterIndex) {\n\t\t\tremoveEmitter(ctx, typeIndex, emitterIndex);\n\t\t});\n\t});\n};\n\nvar drawLine = function(ctx, v0, v1) {\n\n\tctx.lineMaterial = new g.Material(goo.ShaderLib.uber);\n\tctx.lineMaterial.uniforms.materialDiffuse = [0, 0, 0, 0];\n\tctx.lineMaterial.uniforms.materialEmissive = [0, 1, 0, 1];\n\tctx.lineMaterial.blendState.blending = 'CustomBlending';\n    ctx.lineMaterial.cullState.enabled = false;\n\t\n\tif (!pl) return;\n\tvar polyLine = new pl([v0.x, v0.y, v0.z, v1.x, v1.y, v1.z]);\n\tctx.lines.push({\n\t\tttl: ctx.ttl,\n\t\tentity: ctx.world.createEntity(polyLine, ctx.lineMaterial).addToWorld()\n\t});\n};\n\nvar update = function(args, ctx, goo) {\n\tupdateAllEmitters(ctx);\n\tvar i = ctx.lines.length;\n\twhile (i--) {\n\t\tctx.lines[i].ttl -= ctx.world.tpf;\n\t\tctx.lines[i].entity.meshRendererComponent.materials[0].uniforms.opacity = ctx.lines[i].ttl / ctx.ttl;\n\t\tif (ctx.lines[i].ttl < 0) {\n\t\t\tctx.lines[i].entity.removeFromWorld();\n\t\t\tctx.lines.splice(i, 1);\n\t\t}\n\t}\n};\n\nvar parameters = [\n{\n\tkey: 'numImpacts',\n\tname: '# Impacts',\n\ttype: 'int',\n\tdefault: 10\n},\n{\n\tkey: 'numEntities',\n\tname: '# Entities',\n\ttype: 'int',\n\tdefault: 5\n},\n{\n\tkey: 'lifeTime',\n\tname: 'Life Time',\n\ttype: 'float',\n\tdefault: 1.0\n}\n];", "name": "Effects", "license": "CC0", "created": "2014-12-09T10:18:23.712364+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.712393+00:00", "dependencies": {"https://code.gooengine.com/latest/lib/geometrypack.js": {"url": "https://code.gooengine.com/latest/lib/geometrypack.js", "sortValue": 0}}, "id": "32ca38dbf0e64009ac71e957c6c26ca9.script"}, "97d95cecd3444bca99b2a8e485d2f5ff.script": {"body": "/*\n\nThis is the main communication line between the client and the server.\nThe script connects to the WebSocket server and takes care of incoming messages.\n\nThe typical course of events:\n1. Recieve message from server.\n2. Update the client world data with the necessary stuff.\n3. Emit a message using the system bus.\n4. Other scripts/state machines listen to the bus and react.\n\n*/\n\n\nvar g;\nvar parameters = [{key: 'host', type: 'string', default: 'http://localhost:5000'}];\n\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\tctx.host = args.host.replace(/^https?/, 'wss');\n\tctx.seq = 0;\n\tctx.worldData.serverReady = false;\n\tconnectWS(ctx);\n};\n\nvar initialize = function(ctx) {\n\t\n\t// Wrapper for sending a message to the server\n\tctx.worldData.pushMessage = function(message, data) {\n\t\tctx.ws.send(JSON.stringify({message: message, data: data}));\n\t\tctx.seq++;\n\t};\t\n\t\n\t// Wrapper for reciving and parsing a server message\n\tctx.ws.onmessage = function(messageString) {\n\t\tvar message = JSON.parse(messageString.data).message;\n\t\tvar data = JSON.parse(messageString.data).data;\n\t\thandleMessage(ctx, message, data);\n\t};\n\t\n};\n\n// Handle messages recieved from the server\nvar handleMessage = function(ctx, message, data) {\n\tswitch(message) {\n\t\tcase 's_init':\n\t\t\tctx.worldData.occluders = data.occluders;\n\t\t\tctx.worldData.constants = data.constants;\n\t\t\tctx.worldData.id = data.player.id;\n\t\t\tctx.worldData.name = data.player.name;\n\t\t\tctx.worldData.controlNumber = data.control_number;\n\t\t\tctx.worldData.playersNew = data.players;\n\t\t\tctx.worldData.playersOld = data.players;\n\t\t\tg.SystemBus.emit('server_init');\n\t\t\tbreak;\n\t\tcase 's_ping':\n\t\t\tctx.worldData.pushMessage('c_pong');\n\t\t\tbreak;\n\t\tcase 's_handled_deltas':\n\t\t\tctx.worldData.handledDeltas = data;\n\t\t\tg.SystemBus.emit('handled_deltas');\n\t\t\tbreak;\n\t\tcase 's_players':\n\t\t\t// New and old players\n\t\t\tctx.worldData.playersOld = ctx.worldData.copyForInterpolation(ctx.worldData.playersNew);\n\t\t\tctx.worldData.playersNew = data.players;\n\t\t\t// New and old update time\n\t\t\tctx.worldData.timeOld = ctx.worldData.timeNew;\n\t\t\tctx.worldData.timeNew = ctx.world.time;\n\t\t\t// Action stuff\n\t\t\tctx.worldData.shots = data.shots;\n\t\t\tctx.worldData.hits = data.hits;\n\t\t\tctx.worldData.kills = data.kills;\n\t\t\t// Reality check\n\t\t\tif (ctx.worldData.controlNumber != data.control_number) {\n\t\t\t\tconsole.error('Controls number do not match');\n\t\t\t\tconsole.error('Initial', ctx.worldData.controlNumber);\n\t\t\t\tconsole.error('Current', data.control_number);\n\t\t\t\tctx.worldData.showStatus('Server/client mismatch', 'Sorry, plese refresh');\n\t\t\t}\n\t\t\t// Ready for action\n\t\t\tg.SystemBus.emit('players_updated');\n\t\t\tbreak;\n\t\tcase 's_hit_target':\n\t\t\tg.SystemBus.emit('hit_target', data);\n\t\t\tbreak;\n\t\tcase 's_player_connected':\n\t\t\tg.SystemBus.emit('player_connected', data);\n\t\t\tbreak;\n\t\tcase 's_player_disconnected':\n\t\t\tg.SystemBus.emit('player_disconnected', data);\n\t\t\tbreak;\n\t\tcase 's_player_spawned':\n\t\t\tg.SystemBus.emit('player_spawned', data);\n\t\t\tif (data.id == ctx.worldData.id) {\n\t\t\t\tg.SystemBus.emit('i_spawned');\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.error('Unknown message', message);\n\t\t\tbreak;\n\t}\t\n};\n\n\nvar cleanup = function(args, ctx, goo) {\n\tcloseWS(ctx);\n};\n\nvar connectWS = function(ctx) {\n\tctx.ws = new WebSocket(ctx.host);\n\tinitialize(ctx);\n};\n\nvar closeWS = function(ctx) {\n\tif (ctx.ws) {\n\t\tctx.ws.close();\n\t}\n};\n\n", "name": "Connection and Messaging", "license": "CC0", "created": "2014-12-09T10:18:25.051417+00:00", "deleted": false, "modified": "2014-12-09T10:18:25.051440+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "97d95cecd3444bca99b2a8e485d2f5ff.script"}, "63ece8cc0524400e809a4ab4865ee054.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "tile.jpg 3", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2014-12-09T10:18:23.903300+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.903325+00:00", "repeat": [64, 32], "imageRef": "91697bfea1d925a47713ee559251613925e98585.jpg", "lodBias": 0, "offset": [0, 0], "id": "63ece8cc0524400e809a4ab4865ee054.texture", "generateMipmaps": true, "anisotropy": 1, "wrapT": "Repeat"}, "6a64a286d90347d1af794c112031ad28.sound": {"name": "opp_gun", "license": "CC0", "created": "2014-12-09T10:18:22.599464+00:00", "deleted": false, "audioRefs": {"mp3": "b88dc2d382ad42e5bb11822d0e366eaa1a5a364f.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.599486+00:00", "volume": 0.5, "id": "6a64a286d90347d1af794c112031ad28.sound", "loop": false}, "7f1e5b40b318417c9f230b40c901f2b8.entity": {"name": "Gun Sound 3D", "license": "CC0", "created": "2014-12-09T10:18:23.272777+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.272797+00:00", "static": false, "components": {"sound": {"volume": 1, "sounds": {"6a64a286d90347d1af794c112031ad28.sound": {"soundRef": "6a64a286d90347d1af794c112031ad28.sound", "sortValue": 1}, "521c7725095643a582e316be1f1d119a.sound": {"soundRef": "521c7725095643a582e316be1f1d119a.sound", "sortValue": 0}, "8a627779eb394d7e8b2817b4f081ec98.sound": {"soundRef": "8a627779eb394d7e8b2817b4f081ec98.sound", "sortValue": 2}}}, "transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "7f1e5b40b318417c9f230b40c901f2b8.entity"}, "8418e1452f2c4bb5a45d9275a845cd47.entity": {"name": "Score Panel", "license": "CC0", "created": "2014-12-09T10:18:23.995219+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:23.995244+00:00", "dataModelVersion": 2, "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": false, "innerHtml": "<style>\n\t#scores-wrapper {\n\t\tposition: absolute;\n\t\tfont-family: 'Trebuchet MS';\n\t\tcolor: #fff;\n\t\tfont-size: 28;\n\t\ttop: 250px;\n\t\twidth: 800px;\n\t}\n\t\n\t#scores-outer {\n\t\tdisplay: block;\n\t\twidth: 500px;\n\t\tmargin: 0 auto;\n\t}\n\t\n\t#scores-table {\n\t\tposition: relative;\n\t\tborder-collapse: collapse;\n\t\ttext-align: left;\n\t\twidth: 500px;\n\t\tdisplay: none;\n\t\ttable-layout: fixed;\n\t}\n\t\n\ttr.header {\n\t\tbackground-color: #000;\n\t}\n\t\n\ttr.even {\n\t\tbackground-color: #444;\n\t}\n\t\n\ttr.odd {\n\t\tbackground-color: #666;\n\t}\n\t\n</style>\n\n\n<div id='scores-wrapper'>\n\t<div id='scores-outer'>\n\t\t<table id='scores-table'>\n\t\t\t<tr class='header'>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Kills</th>\n\t\t\t\t<th>Deaths</th>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n</div>"}, "transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "8418e1452f2c4bb5a45d9275a845cd47.entity"}, "521c7725095643a582e316be1f1d119a.sound": {"name": "opp_gun", "license": "CC0", "created": "2014-12-09T10:18:24.536192+00:00", "deleted": false, "audioRefs": {"mp3": "b88dc2d382ad42e5bb11822d0e366eaa1a5a364f.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.536217+00:00", "volume": 0.5, "id": "521c7725095643a582e316be1f1d119a.sound", "loop": false}, "206bc7c0945b4fe4bb9bdd611c5a7441.script": {"body": "/*\n\n\tSince shots, hits and kills are all accumulated in arrays,\n\tthis script is needed to sift through these arrays and pass\n\tany interesting info along to other scripts.\n\n*/\n\n\nvar g;\n\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\tctx.worldData.shots = [];\n\tctx.worldData.hits = [];\n\tctx.worldData.kills = [];\n\n\tctx.playersUpdated = function() {\n\t\tcheckForShots(ctx);\n\t\tcheckForHits(ctx);\n\t\tcheckForKills(ctx);\n\t};\n\t\n\tg.SystemBus.addListener('players_updated', ctx.playersUpdated);\n\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tg.SystemBus.removeListener('players_updated', ctx.playersUpdated);\n};\n\nvar checkForShots = function(ctx) {\n\tctx.worldData.shots.forEach(function(v) {\n\t\tg.SystemBus.emit('shot', v);\n\t\tif (v.shooter != ctx.worldData.id) {\n\t\t\tg.SystemBus.emit('opponent_shot', v);\n\t\t}\n\t});\n\tctx.worldData.shots = [];\n};\n\nvar checkForHits = function(ctx) {\n\tctx.worldData.hits.forEach(function(v) {\n\t\tif (v.victim == ctx.worldData.id) {\n\t\t\tg.SystemBus.emit('i_am_hit');\n\t\t} else if (v.shooter != ctx.worldData.id) {\n\t\t\tg.SystemBus.emit('other_hit', v);\n\t\t}\n\t});\t\n\tctx.worldData.hits = [];\n};\n\nvar checkForKills = function(ctx) {\n\tctx.worldData.kills.forEach(function(v) {\n\t\tif (v.victim == ctx.worldData.id) {\n\t\t\tg.SystemBus.emit('i_am_dead');\n\t\t} else if (v.shooter == ctx.worldData.id) {\n\t\t\tctx.worldData.showStatus('You killed ' + ctx.worldData.playersNew[v.victim].name, '', 2);\n\t\t}\n\t\tg.SystemBus.emit('player_killed', v);\n\t});\n\tctx.worldData.kills = [];\n};", "name": "Shots, Hits and Kills", "license": "CC0", "created": "2014-12-09T10:18:26.151397+00:00", "deleted": false, "modified": "2014-12-09T10:18:26.151418+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "206bc7c0945b4fe4bb9bdd611c5a7441.script"}, "3bd4768c69ec4a7c91c51632455b4429.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "bfe2a49cc6fca30195f223b1c3411e2798e2bc9e.jpg", "license": "CC0", "flipY": false, "deleted": false, "originalLicense": "CC0", "magFilter": "Bilinear", "created": "2014-12-09T10:18:24.912525+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.912548+00:00", "repeat": [0, 0], "offset": [0, 0], "id": "3bd4768c69ec4a7c91c51632455b4429.texture", "generateMipmaps": true, "wrapT": "Repeat", "anisotropy": 1, "name": "texture_45"}, "0b34595149dc4ae2b947afbf93349adf.entity": {"name": "Overhead cam 2", "license": "CC0", "created": "2014-12-09T10:18:23.568684+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.568706+00:00", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 100}, "transform": {"translation": [0, 33.43862533569336, 71.12820434570312], "scale": [1, 1, 1], "rotation": [-33.1087750959357, 0, 0]}}, "hidden": false, "id": "0b34595149dc4ae2b947afbf93349adf.entity"}, "31b5f7798b9e48758c47232a17e1784f.sound": {"name": "pain25_1", "license": "CC0", "created": "2014-12-09T10:18:26.534866+00:00", "deleted": false, "audioRefs": {"wav": "0341234c6604565e332c2a864112457382432ee4.wav"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:26.534886+00:00", "volume": 1, "id": "31b5f7798b9e48758c47232a17e1784f.sound", "loop": false}, "7edc48ad371c4b1b934d6ccbba79649b.entity": {"name": "Z+ Wall", "license": "CC0", "created": "2014-12-09T10:18:24.431543+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.431565+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 50], "scale": [100, 10, 1], "rotation": [0, 180, 0]}, "meshRenderer": {"reflectable": true, "materials": {"27a843bf829940e7a32e4f05dff641e9.material": {"materialRef": "27a843bf829940e7a32e4f05dff641e9.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "7edc48ad371c4b1b934d6ccbba79649b.entity"}, "ba923695527f4a09a62990a2a9ccc38e.script": {"body": "/*\n\nTakes care of keyboard input and mouse clicks\n\n*/\n\n\nvar g;\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\t\n\tctx.keyCodes = {\n\t\t'87': 'fwd',\n\t\t'83': 'bwd',\n\t\t'65': 'left',\n\t\t'68': 'right'\n\t};\n\t\n\tctx.worldData.keyState = {\n\t\tfwd: false,\n\t\tbwd: false,\n\t\tleft: false,\n\t\tright: false\n\t};\n\t\n\tctx.worldData.inputSeq = 0;\n\tctx.worldData.inputQueue = [];\n\t\n\tctx.windowListeners = {\n\t\tmousedown: function(evt) {\n\t\t\tif (evt.button === 0) {\n\t\t\t\tleftClick(ctx);\n\t\t\t}\n\t\t},\n\t\tkeydown: function(evt) {\n\t\t\tif (ctx.keyCodes[evt.keyCode] !== undefined) {\n\t\t\t\tkeyDown(ctx, evt.keyCode);\n\t\t\t}\n\t\t},\n\t\tkeyup: function(evt) {\n\t\t\tif (ctx.keyCodes[evt.keyCode] !== undefined) {\n\t\t\t\tkeyUp(ctx, evt.keyCode);\n\t\t\t}\t\n\t\t}\n\t};\n\t\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\twindow.addEventListener(v, ctx.windowListeners[v]);\n\t});\n\n};\n\nvar leftClick = function(ctx) {\n\tif (ctx.worldData.id === undefined || ctx.worldData.alive !== true) return;\n\tg.SystemBus.emit('fire');\n};\n\nvar keyDown = function(ctx, keyCode) {\n\tif (ctx.worldData.id === undefined || ctx.worldData.alive !== true) return;\n\tctx.worldData.keyState[ctx.keyCodes[keyCode]] = true;\n\tg.SystemBus.emit('key_state_changed');\n};\n\nvar keyUp = function(ctx, keyCode) {\n\tif (ctx.worldData.id === undefined || ctx.worldData.alive !== true) return;\n\tctx.worldData.keyState[ctx.keyCodes[keyCode]] = false;\n\tg.SystemBus.emit('key_state_changed');\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\twindow.removeEventListener(v, ctx.windowListeners[v]);\n\t});\n};\n", "name": "Keyboard and Mouse Clicks", "license": "CC0", "created": "2014-12-09T10:18:23.855768+00:00", "deleted": false, "modified": "2014-12-09T10:18:23.855790+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "ba923695527f4a09a62990a2a9ccc38e.script"}, "2b8a77e8f1394dbdb067ff9081b75927.sound": {"name": "die", "license": "CC0", "created": "2014-12-09T10:18:25.675484+00:00", "deleted": false, "audioRefs": {"mp3": "2a11da17656ff34d17dcb80a224f106642750451.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:25.675509+00:00", "volume": 1, "id": "2b8a77e8f1394dbdb067ff9081b75927.sound", "loop": false}, "995323d7b4124594ade164cc9b1ba8c1.skybox": {"box": {"rightRef": "3bd4768c69ec4a7c91c51632455b4429.texture", "leftRef": "94f162b0ac1f45268488d21192ec8533.texture", "enabled": true, "bottomRef": "3e78a461920f4929889eb8c72556f35b.texture", "frontRef": "282d79b593ed4be48cbfff6cb0bc94f8.texture", "topRef": "b3fb5d5d54294d9ca0703228f617a25a.texture", "backRef": "8c9bbc5e3227472baefefad46901812d.texture"}, "name": "Dystopia", "license": "CC0", "created": "2014-12-09T10:18:25.479724+00:00", "deleted": false, "originalLicense": "CC0", "thumbnailRef": "6e2ec0ce7bcaffa4a34ca7f04c6100efd7d7470a.jpg", "dataModelVersion": 2, "originalAsset": {"version": "4a89431b37484f3d8298cf657676ac31", "id": "fd0f1e7e94e54c56af900b76406b3440.skybox"}, "modified": "2014-12-09T10:18:25.479746+00:00", "id": "995323d7b4124594ade164cc9b1ba8c1.skybox"}, "d27478d34aed435a8f547794d63e164f.entity": {"name": "X+ Wall", "license": "CC0", "created": "2014-12-09T10:18:24.332557+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.332582+00:00", "static": false, "components": {"transform": {"translation": [50, 0, 0], "scale": [100, 10, 1], "rotation": [0, -90, 0]}, "meshRenderer": {"reflectable": true, "materials": {"27a843bf829940e7a32e4f05dff641e9.material": {"materialRef": "27a843bf829940e7a32e4f05dff641e9.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "d27478d34aed435a8f547794d63e164f.entity"}, "90be2b07624b4e8eb9225a1adec1a8b6.posteffects": {"name": "Post effects", "license": "CC0", "created": "2014-12-09T10:18:21.770818+00:00", "deleted": false, "dataModelVersion": 2, "posteffects": {}, "modified": "2014-12-09T10:18:21.770840+00:00", "id": "90be2b07624b4e8eb9225a1adec1a8b6.posteffects"}, "5695acc3325445e5a7de6e281c7b992c.machine": {"name": "Behavior", "license": "CC0", "created": "2014-12-09T10:18:24.822664+00:00", "deleted": false, "modified": "2014-12-09T10:18:24.822696+00:00", "dataModelVersion": 2, "states": {"b7067fb2fbf5499fa5cc1f405ad5f7c4.state": {"actions": {"ade6f6ffa88f42f69cc51e0d31b65bb8.action": {"options": {"transitions": {"transition": "8f0e337a6f544b77ba3dc0db591be950.transition"}, "channel": "i_am_dead"}, "type": "Transition on Message", "id": "ade6f6ffa88f42f69cc51e0d31b65bb8.action", "sortValue": 1, "name": "Listen"}, "5b4e1db3033d4a1e9284a9de736e844a.action": {"options": {"cameraEntityRef": "4457de2688c84dc6ace5570be786cf11.entity", "transitions": {}}, "type": "Switch Camera", "id": "5b4e1db3033d4a1e9284a9de736e844a.action", "sortValue": 0, "name": "Switch Camera"}}, "transitions": {"8f0e337a6f544b77ba3dc0db591be950.transition": {"targetState": "dd0580bcbf52453e8aae1cc45bee5d66.state", "id": "8f0e337a6f544b77ba3dc0db591be950.transition", "sortValue": 0, "name": "To"}}, "name": "Playing", "sortValue": 0, "id": "b7067fb2fbf5499fa5cc1f405ad5f7c4.state"}, "dd0580bcbf52453e8aae1cc45bee5d66.state": {"actions": {"079d46c8be7c4c699266743c340c2ae8.action": {"options": {"transitions": {"transition": "f6a09eb16d524b3388fe559f6120eb21.transition"}, "channel": "i_spawned"}, "type": "Transition on Message", "id": "079d46c8be7c4c699266743c340c2ae8.action", "sortValue": 1, "name": "Listen"}, "a1aaeb95f41f4216a1dd3afad71c2127.action": {"options": {"cameraEntityRef": "0ea18dfb4c1744199a58cf0c517c2f34.entity", "transitions": {}}, "type": "Switch Camera", "id": "a1aaeb95f41f4216a1dd3afad71c2127.action", "sortValue": 0, "name": "Switch Camera"}}, "transitions": {"f6a09eb16d524b3388fe559f6120eb21.transition": {"targetState": "b7067fb2fbf5499fa5cc1f405ad5f7c4.state", "id": "f6a09eb16d524b3388fe559f6120eb21.transition", "sortValue": 0, "name": "To"}}, "name": "Hovering", "sortValue": 1, "id": "dd0580bcbf52453e8aae1cc45bee5d66.state"}}, "initialState": "dd0580bcbf52453e8aae1cc45bee5d66.state", "id": "5695acc3325445e5a7de6e281c7b992c.machine"}, "f4f2e35b93a74695b53d1b83f39960a0.sound": {"name": "hitsound", "license": "CC0", "created": "2014-12-09T10:18:24.187031+00:00", "deleted": false, "audioRefs": {"wav": "46dcbbc4984cac1e4afb67d376e6928f8425a124.wav"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.187055+00:00", "volume": 1, "id": "f4f2e35b93a74695b53d1b83f39960a0.sound", "loop": false}, "a5f2f159e7064587bc77180792aa144d.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": true, "value": 0}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0, 0, 0, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [1, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 4", "license": "CC0", "created": "2014-12-09T10:18:23.807494+00:00", "deleted": false, "id": "a5f2f159e7064587bc77180792aa144d.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "TransparencyBlending"}, "modified": "2014-12-09T10:18:23.807526+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {}, "renderQueue": -1}, "d15bc0260af74c1582e4e3d4ca4d377f.script": {"body": "// Add/remove bots with up/down keys\r\n// TODO unify keys and make sure nothing collides, etc\r\n\r\nvar setup = function(args, ctx, goo) {\r\nctx.windowListeners = {\r\n\t\tkeyup: function(evt) {\r\n\t\t\tif (evt.keyCode === 38) {\r\n\t\t\t\tctx.worldData.pushMessage('c_add_bot');\r\n\t\t\t} else if (evt.keyCode === 40) {\r\n\t\t\t\tctx.worldData.pushMessage('c_remove_bot');\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\r\n\t\twindow.addEventListener(v, ctx.windowListeners[v]);\r\n\t});\r\n};\r\n\r\n\r\nvar cleanup = function(args, ctx, goo) {\r\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\r\n\t\twindow.removeEventListener(v, ctx.windowListeners[v]);\r\n\t});\r\n};\r\n", "name": "Bots", "license": "CC0", "created": "2014-12-09T10:18:24.582817+00:00", "deleted": false, "modified": "2014-12-09T10:18:24.582843+00:00", "dataModelVersion": 2, "id": "d15bc0260af74c1582e4e3d4ca4d377f.script"}, "2131197c70de4f819f5ce2b959668fbb.sound": {"name": "deagle-1", "license": "CC0", "created": "2014-12-09T10:18:24.143451+00:00", "deleted": false, "audioRefs": {"wav": "02c34e8664d3fec5332f0dd0bb4a7a14c003a043.wav"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.143478+00:00", "volume": 1, "id": "2131197c70de4f819f5ce2b959668fbb.sound", "loop": false}, "e8c0d961ab1247d38f258664ffbebe1b.script": {"body": "/*\n\nRenders occluders\n\n*/\n\nvar parameters = [{\n\tkey: 'masterEntity',\n\ttype: 'entity'\n}];\n\nvar setup = function(args, ctx, goo) {\n\t\n\tctx.occluderEntities = [];\n\t\n\tctx.onConnect = function() {\n\t\tctx.worldData.occluders.forEach(function(v) {\n\t\t\tvar entity = goo.EntityUtils.clone(ctx.world, args.masterEntity).addToWorld();\n\t\t\tentity.setScale(v.radius, v.radius, v.radius);\n\t\t\tentity.setTranslation(v.position.x, v.position.y, v.position.z);\n\t\t\tctx.occluderEntities.push(entity);\n\t\t});\n\t};\n\t\n\tgoo.SystemBus.addListener('server_init', ctx.onConnect);\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tgoo.SystemBus.removeListener('server_init', ctx.onConnect);\n\tctx.occluderEntities.forEach(function(v) {\n\t\tv.removeFromWorld();\n\t});\n};\n\n", "name": "Occluders and Walls", "license": "CC0", "created": "2014-12-09T10:18:25.914889+00:00", "deleted": false, "modified": "2014-12-09T10:18:25.914911+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "e8c0d961ab1247d38f258664ffbebe1b.script"}, "2abcf395e8ce4cb68318ce217d7632d8.entity": {"name": "Sounds 2", "license": "CC0", "created": "2014-12-09T10:18:24.093618+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.093643+00:00", "static": false, "components": {"sound": {"volume": 1, "sounds": {"8aa642d8aa4942218c790262110732eb.sound": {"soundRef": "8aa642d8aa4942218c790262110732eb.sound", "sortValue": 5}}}, "transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0]}, "stateMachine": {"machines": {"15d26afdca9d4889824ced1bbb66555f.machine": {"machineRef": "15d26afdca9d4889824ced1bbb66555f.machine", "sortValue": 0}}}}, "hidden": false, "id": "2abcf395e8ce4cb68318ce217d7632d8.entity"}, "081c8de82761456f82c660d19765a957.entity": {"name": "Occluder Master", "license": "CC0", "created": "2014-12-09T10:18:21.319392+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:21.319414+00:00", "static": false, "components": {"transform": {"translation": [0, -5, 0], "scale": [1, 1, 1], "rotation": [90, 0, 0]}, "meshRenderer": {"reflectable": true, "materials": {"50c521a1b2384a80938c9f0e1440e515.material": {"materialRef": "50c521a1b2384a80938c9f0e1440e515.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Sphere", "shapeOptions": {"radialSamples": 64, "textureMode": "Projected", "zSamples": 64}}}, "hidden": false, "id": "081c8de82761456f82c660d19765a957.entity"}, "44214dbd288145de80c538dabb09539e.machine": {"name": "Behavior", "license": "CC0", "created": "2014-12-09T10:18:22.851302+00:00", "deleted": false, "modified": "2014-12-09T10:18:22.851333+00:00", "dataModelVersion": 2, "states": {"c771676581a54a138cf8bce264a4c3ee.state": {"sortValue": 1, "transitions": {"dbebb60b01284863a6b813a37a070b65.transition": {"id": "dbebb60b01284863a6b813a37a070b65.transition", "name": "On Completion", "sortValue": 0, "targetState": "82353c01632540f7bf0dadbae3d786b4.state"}, "ce8d5fc82ba449ca954a50a293e2b7e3.transition": {"id": "ce8d5fc82ba449ca954a50a293e2b7e3.transition", "name": "To", "sortValue": 1, "targetState": "8382b8ade8a648c087821a135c721b68.state"}}, "id": "c771676581a54a138cf8bce264a4c3ee.state", "actions": {"9ae7078e961d4a798b256be2cb2c113a.action": {"id": "9ae7078e961d4a798b256be2cb2c113a.action", "type": "Tween Opacity", "name": "Tween Opacity", "sortValue": 0, "options": {"easing2": "In", "to": 1, "transitions": {"complete": "dbebb60b01284863a6b813a37a070b65.transition"}, "easing1": "Linear", "time": 10}}, "54106441c3ce4e3582d763d9050cc176.action": {"id": "54106441c3ce4e3582d763d9050cc176.action", "type": "Transition on Message", "name": "Listen", "sortValue": 1, "options": {"transitions": {"transition": "ce8d5fc82ba449ca954a50a293e2b7e3.transition"}, "channel": "i_am_dead"}}}, "name": "flash in"}, "8382b8ade8a648c087821a135c721b68.state": {"actions": {"8bce48ca5df54a4fa0120babeba132ab.action": {"options": {"easing2": "In", "to": 0, "transitions": {"complete": "e885f5a4075c44e28d54912f087991ae.transition"}, "easing1": "Linear", "time": 1}, "type": "Tween Opacity", "id": "8bce48ca5df54a4fa0120babeba132ab.action", "sortValue": 0, "name": "Tween Opacity"}}, "transitions": {"e885f5a4075c44e28d54912f087991ae.transition": {"targetState": "86e4722fd8604b78b32ed70bd00942b9.state", "id": "e885f5a4075c44e28d54912f087991ae.transition", "sortValue": 0, "name": "On Completion"}}, "name": "remove", "sortValue": 3, "id": "8382b8ade8a648c087821a135c721b68.state"}, "82353c01632540f7bf0dadbae3d786b4.state": {"sortValue": 2, "transitions": {"5a1a20d3ff394bd4a4af85f764a50932.transition": {"id": "5a1a20d3ff394bd4a4af85f764a50932.transition", "name": "On Completion", "sortValue": 0, "targetState": "86e4722fd8604b78b32ed70bd00942b9.state"}, "436b694651ff42fabd573a032c394bec.transition": {"targetState": "8382b8ade8a648c087821a135c721b68.state", "name": "To", "sortValue": 1, "id": "436b694651ff42fabd573a032c394bec.transition"}}, "id": "82353c01632540f7bf0dadbae3d786b4.state", "actions": {"4302f9571497413db5db1980371d6367.action": {"id": "4302f9571497413db5db1980371d6367.action", "type": "Transition on Message", "name": "Listen", "sortValue": 1, "options": {"transitions": {"transition": "436b694651ff42fabd573a032c394bec.transition"}, "channel": "i_am_dead"}}, "5472a58658ef40e9b4cebe289221cb44.action": {"id": "5472a58658ef40e9b4cebe289221cb44.action", "type": "Tween Opacity", "name": "Tween Opacity", "sortValue": 0, "options": {"easing2": "In", "to": 0, "transitions": {"complete": "5a1a20d3ff394bd4a4af85f764a50932.transition"}, "easing1": "Linear", "time": 500}}}, "name": "flash out"}, "86e4722fd8604b78b32ed70bd00942b9.state": {"sortValue": 0, "transitions": {"d5253c02815640f88cd5f731f6c43a15.transition": {"name": "To", "targetState": "82353c01632540f7bf0dadbae3d786b4.state", "sortValue": 3, "id": "d5253c02815640f88cd5f731f6c43a15.transition"}, "22e6bc1caf554cd397eb9049ba51f007.transition": {"id": "22e6bc1caf554cd397eb9049ba51f007.transition", "name": "To", "sortValue": 4, "targetState": "8382b8ade8a648c087821a135c721b68.state"}, "08b0c942f9ed4a89968e396ebf779896.transition": {"id": "08b0c942f9ed4a89968e396ebf779896.transition", "name": "To", "sortValue": 1, "targetState": "c771676581a54a138cf8bce264a4c3ee.state"}}, "id": "86e4722fd8604b78b32ed70bd00942b9.state", "actions": {"5c797117153c4b308e75e8451460bb56.action": {"name": "Listen", "type": "Transition on Message", "options": {"transitions": {"transition": "d5253c02815640f88cd5f731f6c43a15.transition"}, "channel": "spawn_self"}, "sortValue": 3, "id": "5c797117153c4b308e75e8451460bb56.action"}, "fd4bea6fb7e442859c033f44fabec2a1.action": {"id": "fd4bea6fb7e442859c033f44fabec2a1.action", "type": "Transition on Message", "name": "Listen", "sortValue": 1, "options": {"transitions": {"transition": "08b0c942f9ed4a89968e396ebf779896.transition"}, "channel": "i_am_hit"}}, "99af136c85d04d3f8d23fa456642a213.action": {"id": "99af136c85d04d3f8d23fa456642a213.action", "type": "Transition on Message", "name": "Listen", "sortValue": 4, "options": {"transitions": {"transition": "22e6bc1caf554cd397eb9049ba51f007.transition"}, "channel": "i_am_dead"}}}, "name": "idle"}}, "initialState": "86e4722fd8604b78b32ed70bd00942b9.state", "id": "44214dbd288145de80c538dabb09539e.machine"}, "6b3a8f2040fe47778b0f64edeff2b6c7.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "tile.jpg 5", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2014-12-09T10:18:25.435107+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:25.435129+00:00", "repeat": [100, 12], "imageRef": "5bf486f06882cbc53ec3819fb900b3a0c17cd0e4.jpg", "lodBias": 0, "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "6b3a8f2040fe47778b0f64edeff2b6c7.texture", "wrapT": "Repeat"}, "8c9bbc5e3227472baefefad46901812d.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "b22e04e2c43699c2c427ceaa3ff99d9886c2335b.jpg", "license": "CC0", "flipY": false, "deleted": false, "originalLicense": "CC0", "magFilter": "Bilinear", "created": "2014-12-09T10:18:23.616231+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.616256+00:00", "repeat": [0, 0], "offset": [0, 0], "id": "8c9bbc5e3227472baefefad46901812d.texture", "generateMipmaps": true, "wrapT": "Repeat", "anisotropy": 1, "name": "texture_49"}, "9d59b2db19f64e02953943a7a5b67008.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "jcxEeeKcE.png", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2014-12-09T10:18:23.079082+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.079105+00:00", "repeat": [1, 1], "imageRef": "0f98e66ecb6742d01a942b3e7cc2a6fe7a651f1d.png", "offset": [0, 0], "id": "9d59b2db19f64e02953943a7a5b67008.texture", "generateMipmaps": true, "anisotropy": 1, "wrapT": "Repeat"}, "1103b83d54ed4f19923db21c6fe44d9b.entity": {"name": "Blood Quad", "license": "CC0", "created": "2014-12-09T10:18:26.349897+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:26.349919+00:00", "static": false, "components": {"stateMachine": {"machines": {"44214dbd288145de80c538dabb09539e.machine": {"machineRef": "44214dbd288145de80c538dabb09539e.machine", "sortValue": 0}}}, "transform": {"translation": [0, 0, -1.4], "scale": [10, 10, 10], "rotation": [0, 0, 0]}, "meshRenderer": {"reflectable": true, "materials": {"a5f2f159e7064587bc77180792aa144d.material": {"materialRef": "a5f2f159e7064587bc77180792aa144d.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "1103b83d54ed4f19923db21c6fe44d9b.entity"}, "61e971c943284b279a95a896324bdeeb.script": {"body": "var setup = function(args, ctx, goo) {\n\tctx.healthWrapper = document.getElementById('health-wrapper');\n\tctx.healthOuter = document.getElementById('health-outer');\n\tctx.healthInner = document.getElementById('health-inner');\n\t\n\tcenter(ctx);\n\tctx.worldData.displayHealth = function(health) {\n\t\tctx.healthInner.style.width = health*100 + '%';\t\n\t};\n};\n\nvar center = function(ctx) {\n\tctx.healthWrapper.style.width = ctx.domElement.width*window.devicePixelRatio + 'px';\n\tctx.healthWrapper.style.top = ctx.domElement.height*window.devicePixelRatio - 60*window.devicePixelRatio + 'px';\n};", "name": "Health Bar", "license": "CC0", "created": "2014-12-09T10:18:24.679473+00:00", "deleted": false, "modified": "2014-12-09T10:18:24.679495+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "61e971c943284b279a95a896324bdeeb.script"}, "823b6c00990643bd8b15eb00f8bcf707.scene": {"canvas": {"resolution": {"width": 1920, "height": 1080}, "mode": "Stretch"}, "initialCameraRef": "0ea18dfb4c1744199a58cf0c517c2f34.entity", "name": "Goo Arena", "license": "CC0", "created": "2015-11-27T15:11:17.648537+00:00", "deleted": false, "id": "823b6c00990643bd8b15eb00f8bcf707.scene", "thumbnailRef": "17f85ee5fbdc27318dfb01d563bd8e661211f398.jpg", "environmentRef": "b30d645070444a88805274aed6669328.environment", "dataModelVersion": 2, "modified": "2015-11-27T15:58:34.304994+00:00", "entities": {"e3779bd0c62d492ab27085efff232113.entity": {"entityRef": "e3779bd0c62d492ab27085efff232113.entity", "sortValue": 5}, "1e0231637eb5415085513adfaecaafb2.entity": {"entityRef": "1e0231637eb5415085513adfaecaafb2.entity", "sortValue": 22}, "828ad266e44e431994647baae865498f.entity": {"entityRef": "828ad266e44e431994647baae865498f.entity", "sortValue": 0}, "0b34595149dc4ae2b947afbf93349adf.entity": {"entityRef": "0b34595149dc4ae2b947afbf93349adf.entity", "sortValue": 17}, "7edc48ad371c4b1b934d6ccbba79649b.entity": {"entityRef": "7edc48ad371c4b1b934d6ccbba79649b.entity", "sortValue": 12}, "9a47e72204624330bbb2310567f9f92f.entity": {"entityRef": "9a47e72204624330bbb2310567f9f92f.entity", "sortValue": 1}, "652d8234d04840288b221bcdfaa8ea2d.entity": {"entityRef": "652d8234d04840288b221bcdfaa8ea2d.entity", "sortValue": 18}, "15de68eeffd044888226631361266f99.entity": {"entityRef": "15de68eeffd044888226631361266f99.entity", "sortValue": 11}, "76301c1817df4c858972649ace848fae.entity": {"entityRef": "76301c1817df4c858972649ace848fae.entity", "sortValue": 7}, "80b73f964b5446bfb58935d3a8885beb.entity": {"entityRef": "80b73f964b5446bfb58935d3a8885beb.entity", "sortValue": 14}, "5e9e93b8ef81449d87f93f4aab5b6f8f.entity": {"entityRef": "5e9e93b8ef81449d87f93f4aab5b6f8f.entity", "sortValue": 19}, "ecd875d0a0fd453a87f8d20f034518f3.entity": {"entityRef": "ecd875d0a0fd453a87f8d20f034518f3.entity", "sortValue": 9}, "b09d8d36d96b475e8b833406f48641ed.entity": {"entityRef": "b09d8d36d96b475e8b833406f48641ed.entity", "sortValue": 8}, "d27478d34aed435a8f547794d63e164f.entity": {"entityRef": "d27478d34aed435a8f547794d63e164f.entity", "sortValue": 13}, "7f1e5b40b318417c9f230b40c901f2b8.entity": {"entityRef": "7f1e5b40b318417c9f230b40c901f2b8.entity", "sortValue": 21}, "081c8de82761456f82c660d19765a957.entity": {"entityRef": "081c8de82761456f82c660d19765a957.entity", "sortValue": 20}, "0ea18dfb4c1744199a58cf0c517c2f34.entity": {"entityRef": "0ea18dfb4c1744199a58cf0c517c2f34.entity", "sortValue": 15}, "8418e1452f2c4bb5a45d9275a845cd47.entity": {"entityRef": "8418e1452f2c4bb5a45d9275a845cd47.entity", "sortValue": 16}, "b24ebf81e4944e4db6188d06a8b5d88b.entity": {"entityRef": "b24ebf81e4944e4db6188d06a8b5d88b.entity", "sortValue": 2}}, "posteffectsRef": "90be2b07624b4e8eb9225a1adec1a8b6.posteffects", "published": "2015-11-27T15:21:30.895189+00:00", "packs": {"907b2e13942c4e0b85cebc28afea03f1.pack": {"packRef": "907b2e13942c4e0b85cebc28afea03f1.pack", "sortValue": 0}}, "defaultPackRef": "907b2e13942c4e0b85cebc28afea03f1.pack", "publishedUrl": "https://c1.goote.ch/823b6c00990643bd8b15eb00f8bcf707.scene", "tags": {}, "description": "Get ready to play! And get the server code at https://github.com/GooTechnologies/goo-arena"}, "15d26afdca9d4889824ced1bbb66555f.machine": {"name": "Behavior 2", "license": "CC0", "created": "2014-12-09T10:18:22.308874+00:00", "deleted": false, "modified": "2014-12-09T10:18:22.308905+00:00", "dataModelVersion": 2, "states": {"583c610f8d4c40f0bb51e01892010859.state": {"name": "idle", "transitions": {"4ffcfc4930644252a740894c45bb1742.transition": {"targetState": "acba6cce903540aca5bab478dba4ba12.state", "id": "4ffcfc4930644252a740894c45bb1742.transition", "sortValue": 4, "name": "To"}}, "id": "583c610f8d4c40f0bb51e01892010859.state", "actions": {"04e355a1a885417481f8b451c4430517.action": {"options": {"transitions": {"transition": "4ffcfc4930644252a740894c45bb1742.transition"}, "channel": "i_am_dead"}, "type": "Transition on Message", "id": "04e355a1a885417481f8b451c4430517.action", "sortValue": 4, "name": "Listen"}}, "sortValue": 0}, "acba6cce903540aca5bab478dba4ba12.state": {"actions": {"7cfa4c4c71944b80a2d2b11ebd0cd9b6.action": {"options": {"sound": "8aa642d8aa4942218c790262110732eb.sound", "transitions": {"complete": "3c72fa85858d40d8a062d28cb910354c.transition"}, "time": "1"}, "type": "Sound Fade In", "id": "7cfa4c4c71944b80a2d2b11ebd0cd9b6.action", "sortValue": 0, "name": "Sound Fade In"}}, "transitions": {"3c72fa85858d40d8a062d28cb910354c.transition": {"targetState": "583c610f8d4c40f0bb51e01892010859.state", "id": "3c72fa85858d40d8a062d28cb910354c.transition", "sortValue": 0, "name": "On Completion"}}, "name": "play_dead", "sortValue": 5, "id": "acba6cce903540aca5bab478dba4ba12.state"}}, "initialState": "583c610f8d4c40f0bb51e01892010859.state", "id": "15d26afdca9d4889824ced1bbb66555f.machine"}, "50c521a1b2384a80938c9f0e1440e515.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 2", "license": "CC0", "created": "2014-12-09T10:18:21.725854+00:00", "deleted": false, "id": "50c521a1b2384a80938c9f0e1440e515.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2014-12-09T10:18:21.725877+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {"DIFFUSE_MAP": {"enabled": true, "textureRef": "63ece8cc0524400e809a4ab4865ee054.texture"}}, "renderQueue": -1}, "94f162b0ac1f45268488d21192ec8533.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "3b6f27e5fc7eaa528c687a139569b0091a8addc8.jpg", "license": "CC0", "flipY": false, "deleted": false, "originalLicense": "CC0", "magFilter": "Bilinear", "created": "2014-12-09T10:18:22.399589+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.399614+00:00", "repeat": [0, 0], "offset": [0, 0], "id": "94f162b0ac1f45268488d21192ec8533.texture", "generateMipmaps": true, "wrapT": "Repeat", "anisotropy": 1, "name": "texture_46"}, "6169505ff29949fba989d1e3912576c2.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "tile.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2014-12-09T10:18:24.486076+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.486098+00:00", "repeat": [100, 100], "imageRef": "91697bfea1d925a47713ee559251613925e98585.jpg", "lodBias": 0, "offset": [0, 0], "id": "6169505ff29949fba989d1e3912576c2.texture", "generateMipmaps": true, "anisotropy": 1, "wrapT": "Repeat"}, "74ec97b8eb5c4edd84589541bd1a26c0.entity": {"name": "Light", "license": "CC0", "created": "2014-12-09T10:18:21.265617+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:21.265645+00:00", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 5.19, "range": 60, "specularIntensity": 0.15, "penumbra": 32, "angle": 51, "type": "SpotLight", "shadowSettings": {"fov": 51, "darkness": 1, "far": 60, "near": 1, "resolution": [512, 512], "shadowType": "PCF", "size": 100}}, "transform": {"translation": [0, 0, -1.5], "scale": [1, 1, 1], "rotation": [-1.95814, 0, 0]}}, "hidden": true, "id": "74ec97b8eb5c4edd84589541bd1a26c0.entity"}, "56a367db20954ec8afc74b35b6294108.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 3", "license": "CC0", "created": "2014-12-09T10:18:24.630605+00:00", "deleted": false, "id": "56a367db20954ec8afc74b35b6294108.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2014-12-09T10:18:24.630636+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {"DIFFUSE_MAP": {"enabled": true, "textureRef": "6169505ff29949fba989d1e3912576c2.texture"}}, "renderQueue": -1}, "76301c1817df4c858972649ace848fae.entity": {"name": "Floor", "license": "CC0", "created": "2014-12-09T10:18:23.127481+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.127506+00:00", "static": false, "components": {"transform": {"translation": [0, -1, 0], "scale": [100, 100, 100], "rotation": [-90, 0, 0]}, "meshRenderer": {"reflectable": true, "materials": {"56a367db20954ec8afc74b35b6294108.material": {"materialRef": "56a367db20954ec8afc74b35b6294108.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "76301c1817df4c858972649ace848fae.entity"}, "f5496f62854f4c0fba7f8e6737b8ee18.entity": {"name": "Directional", "license": "CC0", "created": "2014-12-09T10:18:21.364525+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:21.364545+00:00", "dataModelVersion": 2, "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.35, "range": 60, "specularIntensity": 0.1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-24.90991676154265, 49.927764172349846, -35.878816370442316], "scale": [1, 1, 1], "translation": [16, 20.5, 23.3]}}, "hidden": false, "id": "f5496f62854f4c0fba7f8e6737b8ee18.entity"}, "c030d2c11d384a359d29b1dc63559893.sound": {"name": "spawn", "license": "CC0", "created": "2014-12-09T10:18:25.624247+00:00", "deleted": false, "audioRefs": {"mp3": "65c2b8a753417bb23f62ba01110f99fb0e2ca840.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:25.624271+00:00", "volume": 1, "id": "c030d2c11d384a359d29b1dc63559893.sound", "loop": false}, "0107df101e0e4c7295fafbb7550cc00f.entity": {"name": "Crosshair", "license": "CC0", "created": "2014-12-09T10:18:23.224315+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:23.224336+00:00", "dataModelVersion": 2, "static": false, "components": {"quad": {"materialRef": "6956c9c2d4384b169cec9c2a6c6d4545.material"}, "transform": {"translation": [0, 0, -0.11], "scale": [0.00786764919757843, 0.00786764919757843, 0.00786764919757843], "rotation": [0, 0, 0]}}, "hidden": false, "id": "0107df101e0e4c7295fafbb7550cc00f.entity"}, "70eddceb62114d30a73248a1e5e9177e.entity": {"name": "Directional 2", "license": "CC0", "created": "2014-12-09T10:18:22.151532+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:22.151551+00:00", "dataModelVersion": 2, "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.9, "range": 60, "specularIntensity": 0.29, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 30, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-84.1203229499319, -176.17371937553685, -60.07154107101883], "scale": [1, 1, 1], "translation": [-22.148197174072266, 11.600000381469727, -58.07421112060547]}}, "hidden": false, "id": "70eddceb62114d30a73248a1e5e9177e.entity"}, "8aa642d8aa4942218c790262110732eb.sound": {"name": "die", "license": "CC0", "created": "2014-12-09T10:18:22.939350+00:00", "deleted": false, "audioRefs": {"mp3": "2a11da17656ff34d17dcb80a224f106642750451.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.939374+00:00", "volume": 1, "id": "8aa642d8aa4942218c790262110732eb.sound", "loop": false}, "0c839edecf1941aea1fe7c089f061ebe.script": {"body": "/*\n\nA rather big (TODO - refactor) script responsible for moving the player.\nIt reacts instantly to input, but uses client prediction mechanisms to \nlet the server be authorative.\n\n1. Move the local player instantly, and send move deltas to server\n2. When the server later responds, set the position to the server's position.\n3. Replay any local movements that happened between 1 and 2\n\nFor this to work, the client needs to replicate the movement and collisions.\nThis is currently re-implemented. \nTODO - share the game core with the server for less code duplication.\n\n*/\n\n\n\nvar g;\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\t\n\tctx.entity = ctx.world.by.name('Player').first();\n\tctx.crosshair = ctx.world.by.name('Crosshair').first();\n\t\n\tctx.worldData.alive = false;\n\t\n\t// Client sends its own deltas, the server validates speed limits (eventually)\n\tctx.deltaQueue = [];\n\tctx.deltaSeq = 0;\n\n\tctx.onInit = function() {\n\t\tctx.worldData.displayHealth(1);\n\t\t// We need to modify the server core a little bit (make Goo vectors)\n\t\tctx.worldData.constants.forward = new g.Vector3(\n\t\t\tctx.worldData.constants.forward.x,\n\t\t\tctx.worldData.constants.forward.y,\n\t\t\tctx.worldData.constants.forward.z);\n\t\tctx.worldData.constants.left = new g.Vector3(\n\t\t\tctx.worldData.constants.left.x,\n\t\t\tctx.worldData.constants.left.y,\n\t\t\tctx.worldData.constants.left.z);\n\t\t// For brevity\n\t\tctx.w = ctx.worldData.constants.walls;\n\t\tctx.r = ctx.worldData.constants.hitRadius;\n\t};\n\tg.SystemBus.addListener('server_init', ctx.onInit);\n\t\n\t// Init prediction player\n\tctx.playerSpawned = function(player) {\n\t\tif (player.id == ctx.worldData.id) {\n\t\t\tctx.worldData.predictPlayer = cloneEssentials(player);\n\t\t\tctx.worldData.alive = true;\n\t\t\tctx.worldData.showStatus('Go!', '', 1);\n\t\t\tg.SystemBus.emit('spawn');\n\t\t\tg.SystemBus.emit('spawn_self');\n\t\t\tg.SystemBus.emit('hide_scores');\n\t\t}\n\t};\n\tg.SystemBus.addListener('player_spawned', ctx.playerSpawned);\n\t\n\t// When the server has handled deltas, remove them from local queue\n\tctx.handledDeltas = function() {\n\t\tremoveHandledDeltasFromQueue(ctx);\n\t};\n\tg.SystemBus.addListener('handled_deltas', ctx.handledDeltas);\n\t\n\t// Send firing message to the server instantly\n\t// TODO this could probably be its own script\n\tctx.fire = function() {\n\t\tif (ctx.worldData.alive !== true) return;\n\t\tsetLocalAim(ctx, ctx.worldData.predictPlayer);\n\t\tctx.worldData.pushMessage('c_fire', {\n\t\t\tsource: [ctx.worldData.predictPlayer.position.x,\n\t\t\t\t\tctx.worldData.predictPlayer.position.y+0.5,\n\t\t\t\t\tctx.worldData.predictPlayer.position.z],\n\t\t\tdirection: [ctx.worldData.predictPlayer.localAim.x,\n\t\t\t\t\tctx.worldData.predictPlayer.localAim.y,\n\t\t\t\t\tctx.worldData.predictPlayer.localAim.z]\n\t\t});\n\t};\n\tg.SystemBus.addListener('fire', ctx.fire);\n\t\n\t// React to own death\n\t// TODO maybe move hit/kill reaction to their own script(s)\n\tctx.playerKilled = function(data) {\n\t\tif (data.victim == ctx.worldData.id) {\n\t\t\tctx.worldData.alive = false;\n\t\t\tctx.worldData.showStatus('You got killed by ' + \n\t\t\t\tctx.worldData.playersNew[data.shooter].name, 'Waiting to respawn');\n\t\t\tg.SystemBus.emit('i_am_dead');\n\t\t\tg.SystemBus.emit('show_scores');\n\t\t\tctx.deltaQueue = [];\n\t\t\tctx.worldData.keyState.fwd = false;\n\t\t\tctx.worldData.keyState.bwd = false;\n\t\t\tctx.worldData.keyState.left = false;\n\t\t\tctx.worldData.keyState.right = false;\n\t\t}\n\t};\n\tg.SystemBus.addListener('player_killed', ctx.playerKilled);\n\t\n\tctx.hitSelf = function() {\n\t\tvar h = ctx.worldData.playersNew[ctx.worldData.id].health / ctx.worldData.constants.startHealth;\n\t\tctx.worldData.displayHealth(h);\n\t};\n\tg.SystemBus.addListener('i_am_hit', ctx.hitSelf);\n\t\n\t\n};\n\n// Clone the essentials needed for prediction\nvar cloneEssentials = function(p) {\n\treturn {\n\t\tid: p.id,\n\t\tlocalMove: new g.Vector3(0, 0, 0),\n\t\tlocalAim: new g.Vector3(0, 0, -1),\n\t\tlocalLeft: new g.Vector3(-1, 0, 0),\n\t\tposition: new g.Vector3(p.position.x, p.position.y, p.position.z),\n\t\trotation: p.rotation.slice()\n\t};\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tg.SystemBus.removeListener('player_spawned', ctx.playerSpawned);\n\tg.SystemBus.removeListener('player_killed', ctx.playerKilled);\n\tg.SystemBus.removeListener('fire', ctx.fire);\n\tg.SystemBus.removeListener('handled_deltas', ctx.handledDeltas);\n\tg.SystemBus.removeListener('i_am_hit', ctx.hitSelf);\n\tg.SystemBus.removeListener('server_init', ctx.onInit);\n};\n\nvar update = function(args, ctx, goo) {\n\tif (!ctx.worldData.predictPlayer) return;\n\tupdatePlayer(ctx, ctx.world.tpf);\n};\n\nvar updatePlayer = function(ctx, tpf) {\n\t\n\t// For brevity\n\tctx.p = ctx.worldData.predictPlayer;\n\t\n\tif (ctx.worldData.alive !== true) return;\n\t\n\t// Update state\n\tctx.p.rotation[0] = ctx.worldData.mouse[1]*ctx.worldData.constants.turnSpeed;\n\tctx.p.rotation[1] = ctx.worldData.mouse[0]*ctx.worldData.constants.turnSpeed;\n\tsetLocalMove(ctx, tpf);\n\tsetLocalLeft(ctx, tpf);\n\tctx.prevPos = ctx.p.position.clone();\n\n\tif (ctx.worldData.keyState.fwd === true) ctx.p.position.add(ctx.p.localMove);\n\tif (ctx.worldData.keyState.bwd === true) ctx.p.position.sub(ctx.p.localMove);\n\tif (ctx.worldData.keyState.left === true) ctx.p.position.add(ctx.p.localLeft);\t\n\tif (ctx.worldData.keyState.right === true) ctx.p.position.sub(ctx.p.localLeft);\t\n\t\n\tctx.deltaPos = g.Vector3.sub(ctx.p.position, ctx.prevPos);\n\n\t// Simple wall check\n\tif (ctx.p.position.x+ctx.r > ctx.w || ctx.p.position.x-ctx.r < -ctx.w) {\n\t\tctx.p.position.x -= ctx.deltaPos.x;\n\t}\n\tif (ctx.p.position.z+ctx.r > ctx.w || ctx.p.position.z-ctx.r < -ctx.w) {\n\t\tctx.p.position.z -= ctx.deltaPos.z;\n\t}\n\t\n\t// Simple player check\n\tObject.keys(ctx.worldData.playersNew).forEach(function(v) {\n\t\tctx.o = new g.Vector3(ctx.worldData.playersNew[v].position.x, \n\t\t\tctx.worldData.playersNew[v].position.y, \n\t\t\tctx.worldData.playersNew[v].position.z);\n\t\tvar d = g.Vector3.sub(ctx.p.position, ctx.o);\n\t\tif (v != ctx.worldData.id && d.length() < ctx.r*2) {\n\t\t\td.normalize();\n\t\t\td.scale(0.2);\n\t\t\td.y = 0;\n\t\t\tctx.p.position.add(d);\n\t\t}\n\t});\n\t\n\t// Simple occluder check\n\tctx.worldData.occluders.forEach(function(v) {\n\t\tctx.o = new g.Vector3(v.position.x, v.position.y, v.position.z);\n\t\tvar d = g.Vector3.sub(ctx.p.position, ctx.o);\n\t\tif (d.length() < ctx.r+v.radius) {\n\t\t\td.normalize();\n\t\t\td.scale(0.2);\n\t\t\td.y = 0;\n\t\t\tctx.p.position.add(d);\n\t\t}\n\t});\n\t\n\t// Resync delta atfer collision checks\n\tctx.deltaPos = g.Vector3.sub(ctx.p.position, ctx.prevPos);\n\t\n\t// Set the rotation on the client, server does not care (TODO);\n\tctx.entity.setRotation(ctx.p.rotation[0], ctx.p.rotation[1], 0);\n\t\n\tif (!(ctx.deltaPos.x === 0 && ctx.deltaPos.y === 0 && ctx.deltaPos.z === 0)) {\n\t\t// Push the move to the local queue\n\t\tpushDeltaToQueue(ctx, ctx.deltaPos);\n\t\t// Let the server know we moved\n\t\tctx.worldData.pushMessage('c_delta', [ctx.deltaPos.x, ctx.deltaPos.y, ctx.deltaPos.z]);\n\t}\n\t\n\t// In each frame, always start with the last known position from the server\n\tsetStateFromServer(ctx);\n\t// Then replay the deltas the server hasn't handled yet\n\treplayUnhandledDeltas(ctx);\n\t\n};\n\nvar pushDeltaToQueue = function(ctx, d) {\n\tctx.deltaSeq++;\n\tctx.deltaQueue.push({\n\t\tseq: ctx.deltaSeq,\n\t\tdelta: d\n\t});\n};\n\n\n// Remove all ticks the server has aldready handled from the \n// local input queue, making it ready for replay\nvar removeHandledDeltasFromQueue = function(ctx) {\n\tvar i = ctx.deltaQueue.length;\n\twhile (i--) {\n\t\tif (ctx.deltaQueue[i].seq <= ctx.worldData.handledDeltas) {\n\t\t\tctx.deltaQueue.splice(i, 1);\n\t\t}\n\t}\n};\n\n// Let the server decide the position\nvar setStateFromServer = function(ctx) {\n\tctx.entity.setTranslation(\n\t\tctx.worldData.playersNew[ctx.worldData.id].position.x,\n\t\tctx.worldData.playersNew[ctx.worldData.id].position.y,\n\t\tctx.worldData.playersNew[ctx.worldData.id].position.z\n\t);\n};\n\n// Replay the input state changes that have happened between server updates\n// Note that only translation is replayed, as the server does not\n// care about the rotation (TODO?)\nvar replayUnhandledDeltas = function(ctx) {\n\tctx.deltaQueue.forEach(function(v) {\n\t\tctx.entity.addTranslation(v.delta);\n\t});\n};\n\n\n// Mirror the server movement functions\n// TODO use the server's core to avoid code duplication\n\nvar setLocalMove = function(ctx, tpf) {\n\tctx.p.localMove = ctx.worldData.constants.forward.clone();\n\trotateY(ctx.p.localMove, ctx.p.rotation[1]);\n\tctx.p.localMove.scale(ctx.worldData.constants.moveSpeed*tpf);\n};\n\nvar setLocalLeft = function(ctx, tpf) {\n\tctx.p.localLeft = ctx.worldData.constants.left.clone();\n\trotateY(ctx.p.localLeft, ctx.p.rotation[1]);\n\tctx.p.localLeft.scale(ctx.worldData.constants.moveSpeed*tpf);\n};\n\nvar setLocalAim = function(ctx, p) {\n\tctx.p.localAim = ctx.worldData.constants.forward.clone();\n\trotateX(ctx.p.localAim, ctx.p.rotation[0]);\n\trotateY(ctx.p.localAim, ctx.p.rotation[1]);\n};\n\nvar rotateY = function(v, angle) {\n    var x = v.x;\n    var z = v.z;\n    v.x = x*Math.cos(angle) + z*Math.sin(angle);\n    v.z = -x*Math.sin(angle) + z*Math.cos(angle);\n};\n\n var rotateX = function(v, angle) {\n    var y = v.y;\n    var z = v.z;\n    v.y = y*Math.cos(angle) - z*Math.sin(angle);\n    v.z = y*Math.sin(angle) + z*Math.cos(angle);\n };", "name": "Player Move, Prediction, Fire, Death", "license": "CC0", "created": "2014-12-09T10:18:24.772132+00:00", "deleted": false, "modified": "2014-12-09T10:18:24.772155+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "0c839edecf1941aea1fe7c089f061ebe.script"}, "28a0540dee4a473c8b58194894f24304.script": {"body": "var g;\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\t\n\tctx.shotSoundEntity = args.shotSoundEntity;\n\tctx.boomSoundEntity = args.boomSoundEntity;\n\t\n\tctx.n = { \n\t\tshot: ctx.shotSoundEntity.soundComponent.sounds.length,\n\t\tboom: ctx.boomSoundEntity.soundComponent.sounds.length\n\t};\n\tctx.active = {\n\t\tshot: 0,\n\t\tboom: 0\n\t};\n\n\tctx.opponentShot = function(shotData) {\n\t\tvar point = new g.Vector3(shotData.source.x, shotData.source.y, shotData.source.z);\n\t\tctx.shotSoundEntity.setTranslation(point);\n\t\tctx.shotSoundEntity.soundComponent.sounds[ctx.active.shot].play();\n\t\tctx.active.shot++;\n\t\tctx.active.shot %= ctx.n.shot;\n\t};\n\tg.SystemBus.addListener('opponent_shot', ctx.opponentShot);\n\t\n\tctx.playerKilled = function(killData) {\n\t\tvar point = new g.Vector3(killData.point.x, killData.point.y, killData.point.z)\n\t\tctx.boomSoundEntity.setTranslation(point);\n\t\tctx.boomSoundEntity.soundComponent.sounds[ctx.active.boom].play();\n\t\tctx.active.boom++;\n\t\tctx.active.boom %= ctx.n.boom;\n\t};\n\tg.SystemBus.addListener('player_killed', ctx.playerKilled);\n};\n\n\nvar cleanup = function(args, ctx, goo) {\n\tg.SystemBus.removeListener('opponent_shot', ctx.opponentShot);\n\tg.SystemBus.removeListener('player_killed', ctx.playerKilled);\n};\n\nvar update = function(args, ctx, goo) {\n\n};\n\nvar parameters = [{\n\tkey: 'shotSoundEntity',\n\ttype: 'entity'\n}, {\n\tkey: 'boomSoundEntity',\n\ttype: 'entity'\n}];", "name": "Sound 3D", "license": "CC0", "created": "2014-12-09T10:18:22.752075+00:00", "deleted": false, "modified": "2014-12-09T10:18:22.752097+00:00", "dataModelVersion": 2, "id": "28a0540dee4a473c8b58194894f24304.script"}, "0ea18dfb4c1744199a58cf0c517c2f34.entity": {"name": "Overhead cam", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-12-09T10:18:24.284538+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:49:58.256866+00:00", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": true, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 100}, "transform": {"rotation": [-41.25294122736124, -130.2416786428299, 0], "scale": [1, 1, 1], "translation": [-54.73381112310965, 58.20117892987346, -50.00942306124139], "children": {"2abcf395e8ce4cb68318ce217d7632d8.entity": {"entityRef": "2abcf395e8ce4cb68318ce217d7632d8.entity", "sortValue": 0}}}}, "hidden": false, "id": "0ea18dfb4c1744199a58cf0c517c2f34.entity"}, "828ad266e44e431994647baae865498f.entity": {"name": "Default Camera", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-12-09T10:18:26.100371+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:49:58.201958+00:00", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": true, "projectionMode": "Perspective", "near": 1, "aspect": 1, "size": 5}, "transform": {"rotation": [-41.25294122736124, -130.2416786428299, 0], "scale": [1, 1, 1], "translation": [-54.73381112310965, 58.20117892987346, -50.00942306124139]}, "script": {"scripts": {"fe21bb9478404a1281326d976585dc47.scriptInstance": {"options": {"maxAscent": 89.95, "whenUsed": true, "orbitSpeed": 0.005, "clampAzimuth": false, "maxAzimuth": 270, "minZoomDistance": 1, "enabled": true, "minAzimuth": 90, "minAscent": -89, "lookAtDistance": 14.316192869642382, "drag": 0.9, "dragButton": "Left", "panButton": "Right", "zoomSpeed": 1, "smoothness": 0.4, "maxZoomDistance": 1000}, "scriptRef": "GOO_ENGINE_SCRIPTS/OrbitNPanControlScript", "sortValue": 0, "name": "OrbitNPanControlScript"}}}}, "hidden": false, "id": "828ad266e44e431994647baae865498f.entity"}, "51f778ed09324411b3b80c6b087a8339.entity": {"name": "Sounds", "license": "CC0", "created": "2014-12-09T10:18:21.525227+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:21.525247+00:00", "static": false, "components": {"sound": {"volume": 1, "sounds": {"31b5f7798b9e48758c47232a17e1784f.sound": {"soundRef": "31b5f7798b9e48758c47232a17e1784f.sound", "sortValue": 1}, "2131197c70de4f819f5ce2b959668fbb.sound": {"soundRef": "2131197c70de4f819f5ce2b959668fbb.sound", "sortValue": 0}, "2b8a77e8f1394dbdb067ff9081b75927.sound": {"soundRef": "2b8a77e8f1394dbdb067ff9081b75927.sound", "sortValue": 5}, "f4f2e35b93a74695b53d1b83f39960a0.sound": {"soundRef": "f4f2e35b93a74695b53d1b83f39960a0.sound", "sortValue": 2}, "c030d2c11d384a359d29b1dc63559893.sound": {"soundRef": "c030d2c11d384a359d29b1dc63559893.sound", "sortValue": 6}, "2c1cc90c68214028a931f7ba3d88c77d.sound": {"soundRef": "2c1cc90c68214028a931f7ba3d88c77d.sound", "sortValue": 7}}}, "transform": {"translation": [0, 1.5619947910308838, -3.6989047527313232], "scale": [1, 1, 1], "rotation": [0, 0, 0]}, "stateMachine": {"machines": {"51dd4b3c490341e89ac57de3de50ed31.machine": {"machineRef": "51dd4b3c490341e89ac57de3de50ed31.machine", "sortValue": 0}}}}, "hidden": false, "id": "51f778ed09324411b3b80c6b087a8339.entity"}, "95e3f3209cd24b4888c76f73c03d3d9e.script": {"body": "var setup = function(args, ctx, goo) {\n\tctx.infoId = document.getElementById('info-id');\n\tctx.infoName = document.getElementById('info-name');\n\tctx.infoHealth = document.getElementById('info-health');\n\tctx.infoLatency = document.getElementById('info-latency');\n\tctx.infoKills = document.getElementById('info-kills');\n\tctx.infoDeaths = document.getElementById('info-deaths');\n\tctx.updateRate = 1;\n\tctx.lastUpdate = 0;\n};\n\nvar update = function(args, ctx, goo) {\n\tif (ctx.world.time - ctx.lastUpdate > ctx.updateRate) {\n\t\tif (ctx.worldData.id !== undefined && ctx.worldData.playersNew !== undefined) {\n\t\t\tctx.player = ctx.worldData.playersNew[ctx.worldData.id];\n\t\t\tctx.infoId.innerHTML = ctx.player.id;\n\t\t\tctx.infoName.innerHTML = ctx.player.name;\n\t\t\tctx.infoHealth.innerHTML = ctx.player.health;\n\t\t\tctx.infoLatency.innerHTML = ctx.player.latency;\n\t\t\tctx.infoKills.innerHTML = ctx.player.kills;\n\t\t\tctx.infoDeaths.innerHTML = ctx.player.deaths;\n\t\t}\n\t\tctx.lastUpdate = ctx.world.time;\n\t}\n};\n\n\n", "name": "Info Panel", "license": "CC0", "created": "2014-12-09T10:18:26.296239+00:00", "deleted": false, "modified": "2014-12-09T10:18:26.296262+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "95e3f3209cd24b4888c76f73c03d3d9e.script"}, "1e0231637eb5415085513adfaecaafb2.entity": {"name": "Boom Sound 3D", "license": "CC0", "created": "2014-12-09T10:18:24.387456+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.387482+00:00", "static": false, "components": {"sound": {"volume": 1, "sounds": {"56bcb2ca77f145329a11e58f614e78c1.sound": {"soundRef": "56bcb2ca77f145329a11e58f614e78c1.sound", "sortValue": 0}}}, "transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "1e0231637eb5415085513adfaecaafb2.entity"}, "ecd875d0a0fd453a87f8d20f034518f3.entity": {"name": "Status Panel", "license": "CC0", "created": "2014-12-09T10:18:23.948442+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.948466+00:00", "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": false, "innerHtml": "<style>\n\n\t#status {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\twidth: 1000px;\n\t\tcolor: white;\n\t\tfont-family: 'Trebuchet MS';\n\t\tfont-size: 40px;\n\t}\n\t\n\t#status-minor {\n\t\tdisplay: block;\n\t\tmargin: 0 auto;\n\t\tmargin-top: 0px;\n\t\tfont-size: 20px;\n\t}\n\t\n\t#status-major {\n\t\tdisplay: block;\n\t\tmargin: 0 auto;\n\t}\n\t\n</style>\n\n<div id=\"status\">\n\t<span id=\"status-major\">Major</span><br />\n\t<span id=\"status-minor\">Minor</span>\n</div>\n\n\n\n"}, "transform": {"translation": [0, -23.054624557495117, 37.505035400390625], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "ecd875d0a0fd453a87f8d20f034518f3.entity"}, "4457de2688c84dc6ace5570be786cf11.entity": {"name": "Player Camera", "license": "CC0", "created": "2014-12-09T10:18:23.477228+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:23.477250+00:00", "dataModelVersion": 2, "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "projectionMode": "Perspective", "near": 0.1, "aspect": 1, "size": 100}, "transform": {"translation": [0, 0.5, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {"74ec97b8eb5c4edd84589541bd1a26c0.entity": {"entityRef": "74ec97b8eb5c4edd84589541bd1a26c0.entity", "sortValue": 2}, "1103b83d54ed4f19923db21c6fe44d9b.entity": {"entityRef": "1103b83d54ed4f19923db21c6fe44d9b.entity", "sortValue": 1}, "0107df101e0e4c7295fafbb7550cc00f.entity": {"entityRef": "0107df101e0e4c7295fafbb7550cc00f.entity", "sortValue": 0}}}, "stateMachine": {"machines": {"5695acc3325445e5a7de6e281c7b992c.machine": {"machineRef": "5695acc3325445e5a7de6e281c7b992c.machine", "sortValue": 0}}}, "script": {"scripts": {}}}, "hidden": false, "id": "4457de2688c84dc6ace5570be786cf11.entity"}, "b3fb5d5d54294d9ca0703228f617a25a.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "82d74d02af75cdcf460564f0edd3db1db0a4b6bd.jpg", "license": "CC0", "flipY": false, "deleted": false, "originalLicense": "CC0", "magFilter": "Bilinear", "created": "2014-12-09T10:18:26.400379+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:26.400402+00:00", "repeat": [0, 0], "offset": [0, 0], "id": "b3fb5d5d54294d9ca0703228f617a25a.texture", "generateMipmaps": true, "wrapT": "Repeat", "anisotropy": 1, "name": "texture_44"}, "6956c9c2d4384b169cec9c2a6c6d4545.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": true, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": false, "value": 0}, "materialDiffuse": {"enabled": true, "value": [0.6895000000000001, 1, 0.13749999999999996, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [1, 1, 1, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "jcxEeeKcE.png Material", "license": "CC0", "created": "2014-12-09T10:18:21.674913+00:00", "deleted": false, "id": "6956c9c2d4384b169cec9c2a6c6d4545.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "CustomBlending"}, "modified": "2014-12-09T10:18:21.674942+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {"DIFFUSE_MAP": {"enabled": true, "textureRef": "9d59b2db19f64e02953943a7a5b67008.texture"}}, "renderQueue": -1}, "2d1e36f30cc54cc8a8368b6cdcc5c1b1.script": {"body": "/*\n\nTakes care of all opponent rendering.\nHere's where the entity interpolation happens.\n\nThe last two known opponent states are saved, and the amout of time\nbetween server updates is estimated. This value is uses to interpolate\nbetween the two positions, rendering a somewhat smooth movement.\n\n*/\n\n\nvar g;\n\nvar setup = function(args, ctx, goo) {\n\tg = goo;\n\tctx.oppEntities = {};\n\t\n\tctx.meshData = new g.Sphere(32, 32, 1);\n\tctx.material = new g.Material(g.ShaderLib.simpleLit);\n\tctx.material.uniforms.materialDiffuse = [0, 0.8, 0, 0];\n\tctx.material.uniforms.materialSpecular = [0, 0, 0, 0];\n\tctx.material.uniforms.materialEmissive = [0, 1, 0, 1];\n\t\n\tctx.materialDead = new g.Material(g.ShaderLib.simpleLit);\n\tctx.materialDead.uniforms.materialDiffuse = [0, 0, 0, 0];\n\tctx.materialDead.uniforms.materialSpecular = [0, 0, 0, 0];\n\t\n\t// Keep track of two ticks worth of player data, interpolate between them\n\tctx.worldData.playersNew = {};\n\tctx.worldData.playersOld = {};\n\tctx.playersInterpolated = {};\n\tctx.timeOfLastUpdate = ctx.world.time;\n\t\n\tctx.worldData.timeNew = 1;\n\tctx.worldData.timeOld = 0;\n\t\n\t// Use average tick length when interpolating\n\tctx.averageTickLength = 100;\n\tctx.recentTicks = [100, 100, 100, 100, 100];\n\t\n\t// Copy what's needed for interpolation\n\tctx.worldData.copyForInterpolation = function(players) {\n\t\tvar copy = {};\n\t\tif (players) {\n\t\t\tObject.keys(players).forEach(function(v) {\n\t\t\t\tvar p = players[v];\n\t\t\t\tcopy[v] = {\n\t\t\t\t\tposition: p.position,\n\t\t\t\t\trotation: p.rotation\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn copy;\n\t};\n\t\n\tctx.playerConnected = function(player) {\n\t\tif (player.id != ctx.worldData.id) {\n\t\t\tinitEntity(ctx, player);\n\t\t}\n\t};\n\t\n\tctx.playerDisconnected = function(id) {\n\t\tif (id != ctx.worldData.id) {\n\t\t\tremoveEntity(ctx, id);\n\t\t}\n\t};\n\t\n\tctx.playerSpawned = function(player) {\n\t\tif (player.id != ctx.worldData.id) {\n\t\t\tg.SystemBus.emit('spawn');\n\t\t\tspawnEntity(ctx, player);\n\t\t} else {\n\t\t\tinitExisting(ctx);\n\t\t}\n\t};\n\t\n\tctx.playerKilled = function(killData) {\n\t\tif (killData.victim != ctx.worldData.id) {\n\t\t\tkillEntity(ctx, killData.victim);\n\t\t}\n\t};\n\t\n\tctx.playersUpdated = function() {\n\t\tcalculateAverageTickLength(ctx);\n\t};\n\t\n\tctx.init = function() {\n\t\tinitExisting(ctx);\n\t};\n\t\n\tg.SystemBus.addListener('server_init', ctx.init);\n\tg.SystemBus.addListener('players_updated', ctx.playersUpdated);\n\tg.SystemBus.addListener('player_spawned', ctx.playerSpawned);\n\tg.SystemBus.addListener('player_killed', ctx.playerKilled);\n\tg.SystemBus.addListener('player_connected', ctx.playerConnected);\n\tg.SystemBus.addListener('player_disconnected', ctx.playerDisconnected);\n\t\n};\n\n// Find and init any players that was there before us\nvar initExisting = function(ctx) {\n\tObject.keys(ctx.worldData.playersNew).forEach(function(v) {\n\t\tif (v != ctx.worldData.id && !ctx.oppEntities[v]) {\n\t\t\tinitEntity(ctx, ctx.worldData.playersNew[v]);\n\t\t\tspawnEntity(ctx, ctx.worldData.playersNew[v]);\n\t\t}\n\t});\n};\n\nvar calculateAverageTickLength = function(ctx) {\n\tctx.recentTicks.shift();\n\tctx.recentTicks.push(ctx.worldData.timeNew - ctx.worldData.timeOld);\n\tctx.averageTickLength = 0;\n\tctx.recentTicks.forEach(function(v) {\n\t\tctx.averageTickLength += v;\n\t});\n\tctx.averageTickLength /= ctx.recentTicks.length;\n};\n\nvar lerp = function(a, b, t) {\n\treturn a*(1-t) + b*t;\n};\n\nvar interpolatePlayers = function(ctx, t) {\n\tctx.playersInterpolated = {};\n\tObject.keys(ctx.worldData.playersNew).forEach(function(v) {\n\t\tif (ctx.worldData.playersOld[v]) {\n\t\t\tctx.playersInterpolated[v] = {\n\t\t\t\tposition: {\n\t\t\t\t\tx: lerp(ctx.worldData.playersOld[v].position.x, ctx.worldData.playersNew[v].position.x, t),\n\t\t\t\t\ty: lerp(ctx.worldData.playersOld[v].position.y, ctx.worldData.playersNew[v].position.y, t),\n\t\t\t\t\tz: lerp(ctx.worldData.playersOld[v].position.z, ctx.worldData.playersNew[v].position.z, t)\n\t\t\t\t}\n\t\t\t};\t\t\t\t\n\t\t} else {\n\t\t\tctx.playersInterpolated[v] = {\n\t\t\t\tposition: {\n\t\t\t\t\tx: ctx.worldData.playersNew[v].position.x,\n\t\t\t\t\ty: ctx.worldData.playersNew[v].position.y,\n\t\t\t\t\tz: ctx.worldData.playersNew[v].position.z\n\t\t\t\t}\t\t\t\t\n\t\t\t};\n\t\t}\n\t});\n};\n\nvar initEntity = function(ctx, player) {\n\tvar entity = ctx.world.createEntity(player.name, ctx.meshData, ctx.material).addToWorld();\n\tentity.hide();\n\tentity.setTranslation(0, 0, 0);\n\tctx.oppEntities[player.id] = entity;\n\tconsole.log('Initialized entity', entity);\n};\n\nvar removeEntity = function(ctx, id) {\n\tctx.oppEntities[id].removeFromWorld();\n\tdelete ctx.oppEntities[id];\n};\n\nvar spawnEntity = function(ctx, player) {\n\tconsole.log('Spawning entity', player.id);\n\tctx.oppEntities[player.id].setTranslation(\n\t\tplayer.position.x,\n\t\tplayer.position.y,\n\t\tplayer.position.z\n\t);\n\tctx.oppEntities[player.id].meshRendererComponent.materials[0] = ctx.material;\n\tctx.oppEntities[player.id].show();\n\t\n\t// To avoid weird interpolation\n\tctx.worldData.playersNew[player.id].position = player.position;\n\tctx.worldData.playersOld[player.id].position = player.position;\n};\n\nvar killEntity = function(ctx, id) {\n\tctx.oppEntities[id].meshRendererComponent.materials[0] = ctx.materialDead;\n\tctx.oppEntities[id].hide();\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tg.SystemBus.removeListener('server_init', ctx.init);\n\tg.SystemBus.removeListener('players_updated', ctx.playersUpdated);\n\tg.SystemBus.removeListener('player_spawned', ctx.playerSpawned);\n\tg.SystemBus.removeListener('player_killed', ctx.playerKilled);\n\tg.SystemBus.removeListener('player_connected', ctx.playerConnected);\n\tg.SystemBus.removeListener('player_disconnected', ctx.playerDisconnected);\n\tObject.keys(ctx.oppEntities).forEach(function(v) {\n\t\tremoveEntity(ctx, v);\n\t});\n};\n\nvar update = function(args, ctx, goo) {\n\tctx.t = (ctx.world.time-ctx.worldData.timeNew)/ctx.averageTickLength;\n\tinterpolatePlayers(ctx, ctx.t);\n\tObject.keys(ctx.oppEntities).forEach(function(v) {\n\t\tif (ctx.playersInterpolated[v]) {\n\t\t\tctx.oppEntities[v].setTranslation(\n\t\t\t\tctx.playersInterpolated[v].position.x,\n\t\t\t\tctx.playersInterpolated[v].position.y, \n\t\t\t\tctx.playersInterpolated[v].position.z\n\t\t\t);\n\t\t}\n\t});\n};", "name": "Opponent Entities", "license": "CC0", "created": "2014-12-09T10:18:22.894797+00:00", "deleted": false, "modified": "2014-12-09T10:18:22.894820+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "2d1e36f30cc54cc8a8368b6cdcc5c1b1.script"}, "282d79b593ed4be48cbfff6cb0bc94f8.texture": {"wrapS": "Repeat", "minFilter": "BilinearNoMipMaps", "imageRef": "6e2ec0ce7bcaffa4a34ca7f04c6100efd7d7470a.jpg", "license": "CC0", "flipY": false, "deleted": false, "originalLicense": "CC0", "magFilter": "Bilinear", "created": "2014-12-09T10:18:24.040118+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:24.040139+00:00", "repeat": [0, 0], "offset": [0, 0], "id": "282d79b593ed4be48cbfff6cb0bc94f8.texture", "generateMipmaps": true, "wrapT": "Repeat", "anisotropy": 1, "name": "texture_47"}, "15de68eeffd044888226631361266f99.entity": {"name": "Z- Wall", "license": "CC0", "created": "2014-12-09T10:18:23.379447+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.379474+00:00", "static": false, "components": {"transform": {"translation": [0, 0, -50], "scale": [100, 10, 1], "rotation": [0, 0, 0]}, "meshRenderer": {"reflectable": true, "materials": {"27a843bf829940e7a32e4f05dff641e9.material": {"materialRef": "27a843bf829940e7a32e4f05dff641e9.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "15de68eeffd044888226631361266f99.entity"}, "80b73f964b5446bfb58935d3a8885beb.entity": {"name": "X- Wall", "license": "CC0", "created": "2014-12-09T10:18:25.384567+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:25.384587+00:00", "static": false, "components": {"transform": {"translation": [-50, 0, 0], "scale": [100, 10, 1], "rotation": [0, 90, 0]}, "meshRenderer": {"reflectable": true, "materials": {"27a843bf829940e7a32e4f05dff641e9.material": {"materialRef": "27a843bf829940e7a32e4f05dff641e9.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "80b73f964b5446bfb58935d3a8885beb.entity"}, "5e9e93b8ef81449d87f93f4aab5b6f8f.entity": {"name": "Name Prompt", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-12-09T10:18:23.320450+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:23.320476+00:00", "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": false, "innerHtml": "<style>\n\t#name-input-wrapper {\n\t\tposition: relative;\n\t\twidth: 1000px;\n\t\ttop: 150px;\n\t\tdisplay: none;\n\t}\n\t\n\t#name-input {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\twidth: 400px;\n\t\theight: 50px;\n\t\tmargin: 0 auto;\n\t\tfont-size: 30px;\n\t\tfont-family: 'Trebuchet MS';\n\t}\n</style>\n\n<div id='name-input-wrapper'>\n\t<input id='name-input' value='?????'></input>\n</div>\n"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}}, "hidden": false, "id": "5e9e93b8ef81449d87f93f4aab5b6f8f.entity"}, "8a627779eb394d7e8b2817b4f081ec98.sound": {"name": "opp_gun", "license": "CC0", "created": "2014-12-09T10:18:26.490729+00:00", "deleted": false, "audioRefs": {"mp3": "b88dc2d382ad42e5bb11822d0e366eaa1a5a364f.mp3"}, "dataModelVersion": 2, "modified": "2014-12-09T10:18:26.490750+00:00", "volume": 0.5, "id": "8a627779eb394d7e8b2817b4f081ec98.sound", "loop": false}, "b09d8d36d96b475e8b833406f48641ed.entity": {"name": "Info Panel", "license": "CC0", "created": "2014-12-09T10:18:23.523256+00:00", "deleted": false, "tags": {}, "modified": "2014-12-09T10:18:23.523276+00:00", "dataModelVersion": 2, "static": false, "components": {"html": {"imageRefs": {}, "useTransformComponent": false, "innerHtml": "<style>\n\t#info {\n\t\twidth: 150px;\n\t\tbackground-color: white;\n\t\tfont-size: 12px;\n\t\tfont-family: 'Trebuchet MS';\n\t\tpadding: 5px;\n\t}\n</style>\n\n<div id='info'>\n\tName: <span id='info-name'>?</span><br />\n\tID: <span id='info-id'>?</span><br />\n\tLatency: <span id='info-latency'>?</span><br />\n\tHealth: <span id='info-health'>?</span><br />\n\tKills: <span id='info-kills'>?</span><br />\n\tDeaths: <span id='info-deaths'>?</span>\n</div>"}, "transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": true, "id": "b09d8d36d96b475e8b833406f48641ed.entity"}, "df290be6f8d94c009970287cb9ba4637.script": {"body": "/*\n\nSets rotation using the mouse position. Also handles the mouse lock\nmechanisms.\n\nNote that the server (currently) does not care about rotation.\n\n*/\n\n\nvar setup = function(args, ctx, goo) {\n\n\tctx.worldData.mouse = [0, 0];\n\t\n\tctx.lockMouse = function() {\n\t\tdocument.documentElement.requestPointerLock();\n\t\tdocument.addEventListener('pointerlockerror', function(error) {\n\t\t\tconsole.error('Pointer lock error', error);\n\t\t}, false);\t\n\t};\n\tgoo.SystemBus.addListener('lock_mouse', ctx.lockMouse);\n\n\tctx.windowListeners = {\n\t\tkeyup: function(evt) {\n\t\t\t// Press F to re-lock mouse\n\t\t\tif (evt.keyCode === 70) {\n\t\t\t\tgoo.SystemBus.emit('lock_mouse');\n\t\t\t}\t\n\t\t},\n\t\tmousemove: function(evt) {\n\t\t\tctx.moveX = evt.movementX ||\n\t\t\t\t\t\tevt.mozMovementX ||\n\t\t\t\t\t\tevt.webkitMovementX;\n\t\t\tctx.moveY = evt.movementY ||\n\t\t\t\t\t\tevt.mozMovementY ||\n\t\t\t\t\t\tevt.webkitMovementY;\n\t\t\tmouseMove(ctx, ctx.moveX, ctx.moveY);\n\t\t}\n\t};\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\tdocument.addEventListener(v, ctx.windowListeners[v]);\n\t});\n\t\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tif (document.pointerLockElement === document.documentElement) {\n\t\tdocument.exitPointerLock();\n\t}\n\tObject.keys(ctx.windowListeners).forEach(function(v) {\n\t\tdocument.removeEventListener(v, ctx.windowListeners[v]);\n\t});\n\tgoo.SystemBus.removeListener('lock_mouse', ctx.lockMouse);\n};\n\nvar mouseMove = function(ctx, x, y) {\n\tctx.worldData.mouse[0] += x;\n\tctx.worldData.mouse[1] += y;\n};\n", "name": "Mouse", "license": "CC0", "created": "2014-12-09T10:18:26.446624+00:00", "deleted": false, "modified": "2014-12-09T10:18:26.446645+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "df290be6f8d94c009970287cb9ba4637.script"}, "27a843bf829940e7a32e4f05dff641e9.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "reflectivity": {"enabled": true, "value": 0}, "materialEmissive": {"enabled": true, "value": [0.19599999999999998, 0.4083333333333333, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 5", "license": "CC0", "created": "2014-12-09T10:18:26.248962+00:00", "deleted": false, "id": "27a843bf829940e7a32e4f05dff641e9.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2014-12-09T10:18:26.248985+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {"DIFFUSE_MAP": {"enabled": true, "textureRef": "6b3a8f2040fe47778b0f64edeff2b6c7.texture"}}, "renderQueue": -1}, "b24ebf81e4944e4db6188d06a8b5d88b.entity": {"name": "Scripts", "license": "CC0", "tags": {}, "deleted": false, "created": "2014-12-09T10:18:22.059879+00:00", "dataModelVersion": 2, "modified": "2014-12-09T10:18:22.059901+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {}}, "script": {"scripts": {"32f02d3228164dbbb499997c042ba03b.scriptInstance": {"options": {"enabled": true}, "scriptRef": "a45d19a5c21a471dabb9d25ec3c28569.script", "sortValue": 11, "name": "Custom script"}, "0b1c36aadf46471587134c383d23c239.scriptInstance": {"options": {"debug": false, "enabled": true, "smoothFactor": 1.1}, "scriptRef": "df290be6f8d94c009970287cb9ba4637.script", "sortValue": 2, "name": "Custom script"}, "a1dd1dcbb3174b06896fd7f7761b70ef.scriptInstance": {"options": {"enabled": true}, "scriptRef": "c152f27ebf2e4a4b90f690921793e1a8.script", "sortValue": 15, "name": "Custom script"}, "67ddf21c1cb148da8c779a2e9feb37e6.scriptInstance": {"options": {"boomSoundEntity": {"enabled": true, "entityRef": "1e0231637eb5415085513adfaecaafb2.entity"}, "enabled": true, "shotSoundEntity": {"enabled": true, "entityRef": "7f1e5b40b318417c9f230b40c901f2b8.entity"}}, "scriptRef": "28a0540dee4a473c8b58194894f24304.script", "sortValue": 17, "name": "Custom script"}, "7e11bb14a75841b8bbd1562e032c9c22.scriptInstance": {"options": {"lifeTime": 1, "numEntities": 5, "numImpacts": 10, "enabled": true}, "scriptRef": "32ca38dbf0e64009ac71e957c6c26ca9.script", "sortValue": 7, "name": "Custom script"}, "ddfe376b8b5e4a94ab396a8d8c0094d0.scriptInstance": {"options": {"enabled": true}, "scriptRef": "d15bc0260af74c1582e4e3d4ca4d377f.script", "sortValue": 16, "name": "Custom script"}, "73eecb0f0b6b408a928fcf8777c93e81.scriptInstance": {"options": {"enabled": true}, "scriptRef": "ba923695527f4a09a62990a2a9ccc38e.script", "sortValue": 0, "name": "Custom script"}, "812225d88b9649968966ed5b317c7cba.scriptInstance": {"options": {"enabled": true}, "scriptRef": "95e3f3209cd24b4888c76f73c03d3d9e.script", "sortValue": 10, "name": "Custom script"}, "98b9433555244d15819e2dc6b52b558f.scriptInstance": {"options": {"enabled": true}, "scriptRef": "0c839edecf1941aea1fe7c089f061ebe.script", "sortValue": 8, "name": "Custom script"}, "bfd3b2ed9e2044cb92feefc6e38eebd3.scriptInstance": {"options": {"enabled": true}, "scriptRef": "206bc7c0945b4fe4bb9bdd611c5a7441.script", "sortValue": 9, "name": "Custom script"}, "f0a296c0ce3d4416ab3ef132d7e24a56.scriptInstance": {"options": {"enabled": true}, "scriptRef": "61e971c943284b279a95a896324bdeeb.script", "sortValue": 12, "name": "Custom script"}, "7eedd3c1f24c4e61801bc52025b0e6fa.scriptInstance": {"options": {"masterEntity": {"enabled": true, "entityRef": "081c8de82761456f82c660d19765a957.entity"}, "enabled": true}, "scriptRef": "e8c0d961ab1247d38f258664ffbebe1b.script", "sortValue": 13, "name": "Custom script"}, "f30716430d2e4c159f75b993313a99b2.scriptInstance": {"options": {"enabled": true}, "scriptRef": "bde434d1a7474fa78a9898576763d9a9.script", "sortValue": 14, "name": "Custom script"}, "e808479fcca740629d7eb9c500620d2d.scriptInstance": {"options": {"host": "http://localhost:5000", "enabled": true}, "scriptRef": "97d95cecd3444bca99b2a8e485d2f5ff.script", "sortValue": 3, "name": "Custom script"}, "5deecb25a7094ca2a7507e68cb2a3259.scriptInstance": {"options": {"enabled": true}, "scriptRef": "2d1e36f30cc54cc8a8368b6cdcc5c1b1.script", "sortValue": 5, "name": "Custom script"}}}}, "hidden": false, "id": "b24ebf81e4944e4db6188d06a8b5d88b.entity"}, "b30d645070444a88805274aed6669328.environment": {"sound": {"volume": 1, "dopplerFactor": 0, "reverb": 0, "rolloffFactor": 0.4, "maxDistance": 100}, "backgroundColor": [0.3, 0.3, 0.3, 1], "license": "CC0", "created": "2014-12-09T10:18:25.096567+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2014-12-09T10:18:25.096590+00:00", "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "fog": {"color": [1, 0, 0], "far": 74, "near": 0, "enabled": false}, "globalAmbient": [0.08802083333333333, 0.08545355902777776, 0.08545355902777776, 0], "skyboxRef": "995323d7b4124594ade164cc9b1ba8c1.skybox", "id": "b30d645070444a88805274aed6669328.environment", "name": "Default Environment"}, "a45d19a5c21a471dabb9d25ec3c28569.script": {"body": "/*\n\nProvide a global function for displaying a simple message.\n\n*/\n\nvar setup = function(args, ctx, goo) {\n\n\tctx.status = document.getElementById('status');\n\tctx.statusMaj = document.getElementById('status-major');\n\tctx.statusMin = document.getElementById('status-minor');\n\t\n\tcenter(ctx);\n\t\n\tctx.worldData.showStatus = function(major, minor, duration) {\n\t\tvar dur = (duration !== undefined) ? duration : 9999999;\n\t\tctx.status.style.opacity = 1;\n\t\tctx.timeToKill = ctx.world.time + dur;\n\t\tvar min = (minor !== undefined) ? minor : '';\n\t\tctx.statusMaj.innerHTML = major;\t\n\t\tctx.statusMin.innerHTML = min;\n\t};\n\t\n\tctx.worldData.showStatus('Connecting...');\n};\n\nvar center = function(ctx) {\n\tctx.status.style.width = ctx.domElement.width/window.devicePixelRatio + 'px';\n};\n\nvar update = function(args, ctx, goo) {\n\tif (ctx.world.time > ctx.timeToKill) {\n\t\tctx.status.style.opacity -= 0.1;\n\t}\n};", "name": "Status Panel", "license": "CC0", "created": "2014-12-09T10:18:22.354617+00:00", "deleted": false, "modified": "2014-12-09T10:18:22.354643+00:00", "dataModelVersion": 2, "dependencies": {}, "id": "a45d19a5c21a471dabb9d25ec3c28569.script"}, "51dd4b3c490341e89ac57de3de50ed31.machine": {"name": "Behavior", "license": "CC0", "created": "2014-12-09T10:18:26.199497+00:00", "deleted": false, "modified": "2014-12-09T10:18:26.199519+00:00", "dataModelVersion": 2, "states": {"2f1a7ac62d02423a927eeba792331176.state": {"sortValue": 3, "transitions": {"a4fa63c11671411ab2e9635e39ecab34.transition": {"id": "a4fa63c11671411ab2e9635e39ecab34.transition", "name": "On Completion", "sortValue": 0, "targetState": "583c610f8d4c40f0bb51e01892010859.state"}}, "id": "2f1a7ac62d02423a927eeba792331176.state", "actions": {"5fcb5ac0005246ec92401d9c9993a1e7.action": {"id": "5fcb5ac0005246ec92401d9c9993a1e7.action", "type": "Sound Fade In", "name": "Sound Fade In", "sortValue": 0, "options": {"sound": "f4f2e35b93a74695b53d1b83f39960a0.sound", "transitions": {"complete": "a4fa63c11671411ab2e9635e39ecab34.transition"}, "time": "1"}}}, "name": "play_enemy_hit"}, "c263460229e64e71bd65a305002896ee.state": {"actions": {"f998e71a74124ae699e894009f333566.action": {"options": {"sound": "c030d2c11d384a359d29b1dc63559893.sound", "transitions": {"complete": "fc9bc300cc71404fac388b7ff0398da1.transition"}, "time": "1"}, "type": "Sound Fade In", "id": "f998e71a74124ae699e894009f333566.action", "sortValue": 0, "name": "Sound Fade In"}}, "transitions": {"fc9bc300cc71404fac388b7ff0398da1.transition": {"targetState": "583c610f8d4c40f0bb51e01892010859.state", "id": "fc9bc300cc71404fac388b7ff0398da1.transition", "sortValue": 0, "name": "On Completion"}}, "name": "play_spawn", "sortValue": 4, "id": "c263460229e64e71bd65a305002896ee.state"}, "1e6b664870314086aeff77f15179cae6.state": {"actions": {"194152ab1cc344358268df07f7514f82.action": {"options": {"sound": "31b5f7798b9e48758c47232a17e1784f.sound", "transitions": {"complete": "97142d1d56c14595ac882059bea23d72.transition"}, "time": "1"}, "type": "Sound Fade In", "id": "194152ab1cc344358268df07f7514f82.action", "sortValue": 0, "name": "Sound Fade In"}}, "transitions": {"97142d1d56c14595ac882059bea23d72.transition": {"targetState": "583c610f8d4c40f0bb51e01892010859.state", "id": "97142d1d56c14595ac882059bea23d72.transition", "sortValue": 0, "name": "On Completion"}}, "name": "play_pain", "sortValue": 2, "id": "1e6b664870314086aeff77f15179cae6.state"}, "583c610f8d4c40f0bb51e01892010859.state": {"name": "idle", "transitions": {"a059f7b8720a4c21a941f99e5806b7c0.transition": {"name": "To", "targetState": "c8ae968e54d34235a10e1779d0bb5e75.state", "sortValue": 0, "id": "a059f7b8720a4c21a941f99e5806b7c0.transition"}, "e8ae6440a478450bacca864855ec7666.transition": {"targetState": "1e6b664870314086aeff77f15179cae6.state", "id": "e8ae6440a478450bacca864855ec7666.transition", "sortValue": 1, "name": "To"}, "38d4fa8dbb6d41af9cfb33c62bfc5b03.transition": {"id": "38d4fa8dbb6d41af9cfb33c62bfc5b03.transition", "name": "To", "sortValue": 2, "targetState": "2f1a7ac62d02423a927eeba792331176.state"}, "ba5a922905d14a059f8f64af40d1048e.transition": {"targetState": "c263460229e64e71bd65a305002896ee.state", "id": "ba5a922905d14a059f8f64af40d1048e.transition", "sortValue": 3, "name": "To"}}, "id": "583c610f8d4c40f0bb51e01892010859.state", "actions": {"31057cfd6975434ab3c9ecfc1020609e.action": {"options": {"transitions": {"transition": "ba5a922905d14a059f8f64af40d1048e.transition"}, "channel": "spawn"}, "type": "Transition on Message", "id": "31057cfd6975434ab3c9ecfc1020609e.action", "sortValue": 3, "name": "Listen"}, "a4f7fa1dd9aa43328024ae1363987e17.action": {"name": "Listen", "type": "Transition on Message", "options": {"transitions": {"transition": "a059f7b8720a4c21a941f99e5806b7c0.transition"}, "channel": "fire"}, "sortValue": 0, "id": "a4f7fa1dd9aa43328024ae1363987e17.action"}, "648e6d0e4c064d3c8ecb1067cf813ad4.action": {"options": {"transitions": {"transition": "e8ae6440a478450bacca864855ec7666.transition"}, "channel": "i_am_hit"}, "type": "Transition on Message", "id": "648e6d0e4c064d3c8ecb1067cf813ad4.action", "sortValue": 1, "name": "Listen"}, "bd9984d215594b509b6a492f32af20a4.action": {"id": "bd9984d215594b509b6a492f32af20a4.action", "type": "Transition on Message", "name": "Listen", "sortValue": 2, "options": {"transitions": {"transition": "38d4fa8dbb6d41af9cfb33c62bfc5b03.transition"}, "channel": "hit_target"}}}, "sortValue": 0}, "c8ae968e54d34235a10e1779d0bb5e75.state": {"name": "play_fire", "transitions": {"879c4611cffe4aee8086a2547847aba8.transition": {"name": "On Completion", "targetState": "583c610f8d4c40f0bb51e01892010859.state", "sortValue": 0, "id": "879c4611cffe4aee8086a2547847aba8.transition"}}, "id": "c8ae968e54d34235a10e1779d0bb5e75.state", "actions": {"59dd9f53fa154f4b83c0196ad8063417.action": {"name": "Sound Fade In", "type": "Sound Fade In", "options": {"sound": "2c1cc90c68214028a931f7ba3d88c77d.sound", "transitions": {"complete": "879c4611cffe4aee8086a2547847aba8.transition"}, "time": "1"}, "sortValue": 0, "id": "59dd9f53fa154f4b83c0196ad8063417.action"}}, "sortValue": 1}}, "initialState": "583c610f8d4c40f0bb51e01892010859.state", "id": "51dd4b3c490341e89ac57de3de50ed31.machine"}}