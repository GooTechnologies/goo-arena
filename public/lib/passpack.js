webpackJsonp([14],{0:function(a,b,c){a.exports=c(434)},434:function(a,b,c){if(a.exports={BloomPass:c(435),BlurPass:c(437),DepthPass:c(438),DofPass:c(439),DogPass:c(440),MotionBlurPass:c(441),PassLib:c(442),PosteffectsHandler:c(443),ShaderLibExtra:c(436),SsaoPass:c(444)},"undefined"!=typeof window)for(var d in a.exports)window.goo[d]=a.exports[d]},435:function(a,b,c){function d(a){a=a||{},this.target=void 0!==a.target?a.target:null;var b=void 0!==a.strength?a.strength:0,c=void 0!==a.sigma?a.sigma:4,g=2*Math.ceil(3*c)+1;this.downsampleAmount=void 0!==a.downsampleAmount?Math.max(a.downsampleAmount,1):4;var k=window.innerWidth||1024,l=window.innerHeight||1024;this.updateSize({x:0,y:0,width:k,height:l}),this.renderable={meshData:f.quad,materials:[]},this.copyMaterial=new e(i.copyPure),this.copyMaterial.uniforms.opacity=b,this.copyMaterial.blendState.blending="AdditiveBlending",this.convolutionShader=h.deepClone(i.convolution),this.convolutionShader.defines={KERNEL_SIZE_FLOAT:g.toFixed(1),KERNEL_SIZE_INT:g.toFixed(0)},this.convolutionMaterial=new e(this.convolutionShader),this.convolutionMaterial.uniforms.uImageIncrement=d.blurX,this.convolutionMaterial.uniforms.cKernel=this.convolutionShader.buildKernel(c),this.bcMaterial=new e(j.brightnesscontrast),this.bcMaterial.uniforms.brightness=0,this.bcMaterial.uniforms.contrast=0,this.enabled=!0,this.clear=!1,this.needsSwap=!1}var e=c(30),f=c(136),g=c(133),h=c(6),i=c(46),j=c(436),k=c(137);d.prototype=Object.create(k.prototype),d.prototype.constructor=d,d.prototype.destroy=function(a){this.renderTargetX&&this.renderTargetX.destroy(a.context),this.renderTargetY&&this.renderTargetY.destroy(a.context),this.convolutionMaterial.shader.destroy(),this.copyMaterial.shader.destroy(),this.bcMaterial.shader.destroy()},d.prototype.invalidateHandles=function(a){a.invalidateMaterial(this.convolutionMaterial),a.invalidateMaterial(this.copyMaterial),a.invalidateMaterial(this.convolutionMaterial),a.invalidateMaterial(this.bcMaterial),a.invalidateRenderTarget(this.renderTargetX),a.invalidateRenderTarget(this.renderTargetY),a.invalidateMeshData(this.renderable.meshData)},d.prototype.updateSize=function(a,b){var c=a.width/this.downsampleAmount,d=a.height/this.downsampleAmount;this.renderTargetX&&this.renderTargetX.destroy(b.context),this.renderTargetY&&this.renderTargetY.destroy(b.context),this.renderTargetX=new g(c,d),this.renderTargetY=new g(c,d)},d.prototype.render=function(a,b,c){this.renderable.materials[0]=this.bcMaterial,this.bcMaterial.setTexture("DIFFUSE_MAP",c),a.render(this.renderable,f.camera,[],this.renderTargetY,!0),this.renderable.materials[0]=this.convolutionMaterial,this.convolutionMaterial.setTexture("DIFFUSE_MAP",this.renderTargetY),this.convolutionMaterial.uniforms.uImageIncrement=d.blurY,a.render(this.renderable,f.camera,[],this.renderTargetX,!0),this.convolutionMaterial.setTexture("DIFFUSE_MAP",this.renderTargetX),this.convolutionMaterial.uniforms.uImageIncrement=d.blurX,a.render(this.renderable,f.camera,[],this.renderTargetY,!0),this.renderable.materials[0]=this.copyMaterial,this.copyMaterial.setTexture("DIFFUSE_MAP",this.renderTargetY),null!==this.target?a.render(this.renderable,f.camera,[],this.target,this.clear):a.render(this.renderable,f.camera,[],c,this.clear)},d.blurX=[.001953125,0],d.blurY=[0,.001953125],a.exports=d},436:function(a,b,c){function d(){}var e=c(14),f=c(31),g=c(47),h=c(46),i=c(34);d.billboard={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewProjectionMatrix:f.VIEW_PROJECTION_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,viewMatrix:f.VIEW_MATRIX,worldMatrix:f.WORLD_MATRIX,diffuseMap:f.DIFFUSE_MAP},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewProjectionMatrix;","uniform mat4 worldMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","varying vec2 texCoord0;","void main(void) {","texCoord0 = vertexUV0;","gl_Position = viewProjectionMatrix * worldMatrix * vec4(0.0, 0.0, 0.0, 1.0) + projectionMatrix * vec4(vertexPosition.x, vertexPosition.y, 0.0, 0.0);","}"].join("\n"),fshader:["uniform sampler2D diffuseMap;","varying vec2 texCoord0;","void main(void)","{","gl_FragColor = texture2D(diffuseMap, texCoord0);","}"].join("\n")},d.showDepth={attributes:{vertexPosition:e.POSITION},uniforms:{viewProjectionMatrix:f.VIEW_PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,near:f.NEAR_PLANE,far:f.FAR_PLANE},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewProjectionMatrix;","uniform mat4 worldMatrix;","void main(void) {","gl_Position = viewProjectionMatrix * (worldMatrix * vec4(vertexPosition, 1.0));","}"].join("\n"),fshader:["uniform float near;","uniform float far;","void main(void)","{","float depth = gl_FragCoord.z / gl_FragCoord.w;","float d = 1.0 - smoothstep( near, far, depth );","gl_FragColor = vec4(d);","}"].join("\n")},d.bokehShader={attributes:{position:e.POSITION,uv:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tColor:f.DIFFUSE_MAP,tDepth:f.DEPTH_MAP,focus:1,aspect:1,aperture:.025,maxblur:1},vshader:["attribute vec3 position;","attribute vec2 uv;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( position, 1.0 );","}"].join("\n"),fshader:["varying vec2 vUv;","uniform sampler2D tColor;","uniform sampler2D tDepth;","uniform float maxblur;","uniform float aperture;","uniform float focus;","uniform float aspect;","void main() {","vec2 aspectcorrect = vec2( 1.0, aspect );","vec4 depth1 = texture2D( tDepth, vUv );","float factor = depth1.x - focus;","vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );","vec2 dofblur9 = dofblur * 0.9;","vec2 dofblur7 = dofblur * 0.7;","vec2 dofblur4 = dofblur * 0.4;","vec4 col = vec4( 0.0 );","col += texture2D( tColor, vUv.xy );","col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );","col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );","col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );","gl_FragColor = col / 41.0;","gl_FragColor.a = 1.0;","}"].join("\n")},d.sepia={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,amount:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform float amount;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 color = texture2D(tDiffuse, vUv );","vec3 c = color.rgb;","color.r = dot(c, vec3(1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount));","color.g = dot(c, vec3(0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount));","color.b = dot(c, vec3(0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount));","gl_FragColor = vec4(min(vec3(1.0), color.rgb), color.a);","}"].join("\n")},d.dotscreen={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,tSize:[256,256],center:[.5,.5],angle:1.57,scale:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform vec2 center;","uniform float angle;","uniform float scale;","uniform vec2 tSize;","uniform sampler2D tDiffuse;","varying vec2 vUv;","float pattern() {","float s = sin( angle ), c = cos( angle );","vec2 tex = vUv * tSize - center;","vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;","return ( sin( point.x ) * sin( point.y ) ) * 4.0;","}","void main() {","vec4 color = texture2D( tDiffuse, vUv );","float average = ( color.r + color.g + color.b ) / 3.0;","gl_FragColor = vec4( color.rgb * vec3( average * 10.0 - 5.0 + pattern() ), color.a );","}"].join("\n")},d.vignette={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,offset:1,darkness:1.5},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform float offset;","uniform float darkness;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );","gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );","}"].join("\n")},d.film={attributes:h.copy.attributes,uniforms:{tDiffuse:f.DIFFUSE_MAP,time:f.TIME,nIntensity:.5,sIntensity:.5,sCount:1024,grayscale:0,viewProjectionMatrix:f.VIEW_PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,opacity:1,diffuseMap:f.DIFFUSE_MAP},vshader:h.copy.vshader,fshader:["uniform float time;","uniform bool grayscale;","uniform float nIntensity;","uniform float sIntensity;","uniform float sCount;","uniform sampler2D tDiffuse;","varying vec2 texCoord0;","void main() {","vec4 cTextureScreen = texture2D( tDiffuse, texCoord0 );","float x = texCoord0.x * texCoord0.y * time * 1000.0;","x = mod( x, 13.0 ) * mod( x, 123.0 );","float dx = mod( x, 0.01 );","vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );","vec2 sc = vec2( sin( texCoord0.y * sCount ), cos( texCoord0.y * sCount ) );","cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;","cResult = cTextureScreen.rgb + nIntensity * ( cResult - cTextureScreen.rgb );","if ( grayscale ) {","	cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );","}","gl_FragColor = vec4( cResult, cTextureScreen.a );","}"].join("\n")},d.noise={attributes:h.copy.attributes,uniforms:{tDiffuse:f.DIFFUSE_MAP,time:function(){return i.time},nIntensity:.5,grayscale:0,viewProjectionMatrix:f.VIEW_PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,opacity:1,diffuseMap:f.DIFFUSE_MAP},vshader:h.copy.vshader,fshader:["uniform float time;","uniform bool grayscale;","uniform float nIntensity;","uniform sampler2D tDiffuse;","varying vec2 texCoord0;","void main() {","vec4 cTextureScreen = texture2D( tDiffuse, texCoord0);","float x = texCoord0.x * texCoord0.y * time * 1000.0;","vec3 cResult;","if ( !grayscale ) {","float y = fract(sin(dot(vec2(mod( x + 20.0, 87.0 ), mod( x + 150.0, 23.0 )), vec2(12.9898,78.233))) * 43758.5453);","float z = fract(sin(dot(vec2(mod( x + 30.0, 19.0 ), mod( x + 200.0, 103.0 )), vec2(12.9898,78.233))) * 43758.5453);","x = fract(sin(dot(vec2(mod( x, 13.0 ), mod( x + 50.0, 123.0 )), vec2(12.9898,78.233))) * 43758.5453);","cResult = vec3(x, y, z);","} else {","x = fract(sin(dot(vec2(mod( x, 13.0 ), mod( x + 50.0, 123.0 )), vec2(12.9898,78.233))) * 43758.5453);","cResult = vec3(x);","}","gl_FragColor = vec4( mix(cTextureScreen.rgb, cResult, nIntensity), cTextureScreen.a );","}"].join("\n")},d.bleachbypass={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,opacity:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 base = texture2D( tDiffuse, vUv );","vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );","float lum = dot( lumCoeff, base.rgb );","vec3 blend = vec3( lum );","float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );","vec3 result1 = 2.0 * base.rgb * blend;","vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );","vec3 newColor = mix( result1, result2, L );","float A2 = opacity * base.a;","vec3 mixRGB = A2 * newColor.rgb;","mixRGB += ( ( 1.0 - A2 ) * base.rgb );","gl_FragColor = vec4( mixRGB, base.a );","}"].join("\n")},d.horizontalTiltShift={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,h:1/128,r:.5},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform float h;","uniform float r;","varying vec2 vUv;","void main() {","vec4 sum = vec4( 0.0 );","float hh = h * abs( r - vUv.y );","sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;","sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;","sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;","sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;","sum += texture2D( tDiffuse, vec2( vUv.x,            vUv.y ) ) * 0.1633;","sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;","sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;","sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;","sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;","gl_FragColor = sum;","}"].join("\n")},d.colorify={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,color:[1,1,1],amount:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform vec3 color;","uniform float amount;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","gl_FragColor = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( gl_FragColor.rgb, luma );","gl_FragColor.rgb = mix(gl_FragColor.rgb, v * color, amount);","}"].join("\n")},d.hatch={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,width:0,spread:10,replace:!0},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform float width;","uniform float spread;","uniform bool replace;","varying vec2 vUv;","void main() {","gl_FragColor = texture2D( tDiffuse, vUv );","float lum = length(gl_FragColor.rgb);","vec3 mult = vec3(1.0, 1.0, 1.0);","float halfSpread = (spread*0.5);","if (lum < 1.00) {","float diff = abs(mod(gl_FragCoord.x + gl_FragCoord.y, spread) - halfSpread);","if (diff <= width) {","mult *= vec3(1.0 - (width - diff) / width);","}","}","if (lum < 0.75) {","float diff = abs(mod(gl_FragCoord.x - gl_FragCoord.y, spread) - halfSpread);","if (diff <= width) {","mult *= vec3(1.0 - (width - diff) / width);","}","}","if (lum < 0.50) {","float diff = abs(mod(gl_FragCoord.x + halfSpread + gl_FragCoord.y, spread) - halfSpread);","if (diff <= width) {","mult *= vec3(1.0 - (width - diff) / width);","}","}","if (lum < 0.25) {","float diff = abs(mod(gl_FragCoord.x + halfSpread - gl_FragCoord.y, spread) - halfSpread);","if (diff <= width) {","mult *= vec3(1.0 - (width - diff) / width);","}","}","if (replace) {","gl_FragColor.rgb = mult;","} else {","gl_FragColor.rgb *= mult;","}","}"].join("\n")},d.ssao={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,tDepth:f.DEPTH_MAP,size:[512,512],cameraNear:f.MAIN_NEAR_PLANE,cameraFar:f.MAIN_FAR_PLANE,fogNear:f.MAIN_NEAR_PLANE,fogFar:f.MAIN_FAR_PLANE,fogEnabled:0,onlyAO:0,aoClamp:.3,lumInfluence:0},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform float cameraNear;","uniform float cameraFar;","uniform float fogNear;","uniform float fogFar;","uniform bool fogEnabled;","uniform bool onlyAO;","uniform vec2 size;","uniform float aoClamp;","uniform float lumInfluence;","uniform sampler2D tDiffuse;","uniform sampler2D tDepth;","varying vec2 vUv;","#define DL 2.399963229728653","#define EULER 2.718281828459045","float width = size.x;","float height = size.y;","float cameraFarPlusNear = cameraFar + cameraNear;","float cameraFarMinusNear = cameraFar - cameraNear;","float cameraCoef = 2.0 * cameraNear;","const int samples = 16;","const float radius = 2.0;","const bool useNoise = false;","const float noiseAmount = 0.0003;","const float diffArea = 0.4;","const float gDisplace = 0.4;","const vec3 onlyAOColor = vec3( 1.0, 1.0, 1.0 );","float unpackDepth( const in vec4 rgba_depth ) {","const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );","float depth = dot( rgba_depth, bit_shift );","return depth;","}","vec2 rand( const vec2 coord ) {","vec2 noise;","if ( useNoise ) {","float nx = dot ( coord, vec2( 12.9898, 78.233 ) );","float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );","noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );","} else {","float ff = fract( 1.0 - coord.s * ( width / 2.0 ) );","float gg = fract( coord.t * ( height / 2.0 ) );","noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;","}","return ( noise * 2.0  - 1.0 ) * noiseAmount;","}","float doFog() {","float zdepth = unpackDepth( texture2D( tDepth, vUv ) );","float depth = -cameraFar * cameraNear / ( zdepth * cameraFarMinusNear - cameraFar );","return smoothstep( fogNear, fogFar, depth );","}","float readDepth( const in vec2 coord ) {","return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );","}","float compareDepths( const in float depth1, const in float depth2, inout int far ) {","float garea = 2.0;","float diff = ( depth1 - depth2 ) * 100.0;","if ( diff < gDisplace ) {","garea = diffArea;","} else {","far = 1;","}","float dd = diff - gDisplace;","float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );","return gauss;","}","float calcAO( float depth, float dw, float dh ) {","float dd = radius - depth * radius;","vec2 vv = vec2( dw, dh );","vec2 coord1 = vUv + dd * vv;","vec2 coord2 = vUv - dd * vv;","float temp1 = 0.0;","float temp2 = 0.0;","int far = 0;","temp1 = compareDepths( depth, readDepth( coord1 ), far );","if ( far > 0 ) {","temp2 = compareDepths( readDepth( coord2 ), depth, far );","temp1 += ( 1.0 - temp1 ) * temp2;","}","return temp1;","}","void main() {","vec2 noise = rand( vUv );","float depth = readDepth( vUv );","float tt = clamp( depth, aoClamp, 1.0 );","float w = ( 1.0 / width )  / tt + ( noise.x * ( 1.0 - noise.x ) );","float h = ( 1.0 / height ) / tt + ( noise.y * ( 1.0 - noise.y ) );","float pw;","float ph;","float ao;","float dz = 1.0 / float( samples );","float z = 1.0 - dz / 2.0;","float l = 0.0;","for ( int i = 0; i <= samples; i ++ ) {","float r = sqrt( 1.0 - z );","pw = cos( l ) * r;","ph = sin( l ) * r;","ao += calcAO( depth, pw * w, ph * h );","z = z - dz;","l = l + DL;","}","ao /= float( samples );","ao = 1.0 - ao;","if ( fogEnabled ) {","ao = mix( ao, 1.0, doFog() );","}","vec3 color = texture2D( tDiffuse, vUv ).rgb;","vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );","float lum = dot( color.rgb, lumcoeff );","vec3 luminance = vec3( lum );","vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );","if ( onlyAO ) {","final = onlyAOColor * vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );","}","gl_FragColor = vec4( final, 1.0 );","}"].join("\n")},d.skinning={defines:{JOINT_COUNT:56,WEIGHTS:4},attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0,vertexWeights:e.WEIGHTS,vertexJointIDs:e.JOINTIDS},uniforms:{viewProjectionMatrix:f.VIEW_PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,diffuseMap:f.DIFFUSE_MAP,jointPalette:function(a){var b=a.meshData,c=b.currentPose;if(c){var d=c._matrixPalette,e=16*b.paletteMap.length,f=b.store;f||(f=new Float32Array(e),b.store=f);for(var g,h=0;h<b.paletteMap.length;h++){g=d[b.paletteMap[h]];for(var i=0;4>i;i++)for(var j=0;4>j;j++)f[16*h+4*i+j]=g.data[4*j+i]}return f}}},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","attribute vec4 vertexWeights;","attribute vec4 vertexJointIDs;","uniform mat4 viewProjectionMatrix;","uniform mat4 worldMatrix;","uniform mat4 jointPalette[JOINT_COUNT];","varying vec2 texCoord0;","void main(void) {","mat4 mat = mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);","mat += jointPalette[int(vertexJointIDs.x)] * vertexWeights.x;","mat += jointPalette[int(vertexJointIDs.y)] * vertexWeights.y;","mat += jointPalette[int(vertexJointIDs.z)] * vertexWeights.z;","mat += jointPalette[int(vertexJointIDs.w)] * vertexWeights.w;","texCoord0 = vertexUV0;","gl_Position = viewProjectionMatrix * worldMatrix * mat * vec4(vertexPosition, 1.0);","}"].join("\n"),fshader:["uniform sampler2D diffuseMap;","varying vec2 texCoord0;","void main(void)","{","gl_FragColor = texture2D(diffuseMap, texCoord0);","}"].join("\n")},d.rgbshift={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,amount:.005,angle:0},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform float amount;","uniform float angle;","varying vec2 vUv;","void main() {","vec2 offset = amount * vec2( cos(angle), sin(angle));","vec4 cr = texture2D(tDiffuse, vUv + offset);","vec4 cga = texture2D(tDiffuse, vUv);","vec4 cb = texture2D(tDiffuse, vUv - offset);","gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);","}"].join("\n")},d.brightnesscontrast={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,brightness:0,contrast:0,saturation:0},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform float brightness;","uniform float contrast;","uniform float saturation;","varying vec2 vUv;","void main() {","gl_FragColor = texture2D( tDiffuse, vUv );","gl_FragColor.rgb += brightness;","if (contrast > 0.0) {","gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;","} else {","gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;","}","vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), gl_FragColor.rgb));","gl_FragColor.rgb = mix(gl_FragColor.rgb, gray, -saturation);","}"].join("\n")},d.hsb={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,hue:0,saturation:0,brightness:0},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform float hue;","uniform float saturation;","uniform float brightness;","varying vec2 vUv;",g.methods.hsv,"void main() {","gl_FragColor = texture2D(tDiffuse, vUv);","vec3 fragHSV = rgb2hsv(gl_FragColor.rgb).xyz;","fragHSV.x += hue * 0.5;","fragHSV.y *= saturation + 1.0 - max(brightness, 0.0) * 2.0;","fragHSV.z *= min(brightness + 1.0, 1.0);","fragHSV.z += max(brightness, 0.0);","fragHSV.xyz = clamp(fragHSV.xyz, vec3(-10.0, 0.0, 0.0), vec3(10.0, 1.0, 1.0));","gl_FragColor.rgb = hsv2rgb(fragHSV);","}"].join("\n")},d.luminosity={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( texel.xyz, luma );","gl_FragColor = vec4( v, v, v, texel.w );","}"].join("\n")},d.toon={attributes:{vertexPosition:e.POSITION,vertexNormal:e.NORMAL},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,cameraPosition:f.CAMERA,lightPosition:f.LIGHT0,HighlightColor:[.9,.8,.7,1],MidColor:[.65,.55,.45,1],ShadowColor:[.4,.3,.2,1],HighlightSize:.2,ShadowSize:.01,OutlineWidth:.15},vshader:["attribute vec3 vertexPosition;","attribute vec3 vertexNormal;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform vec3 cameraPosition;","uniform vec3 lightPosition;","varying vec3 N;","varying vec3 V;","varying vec3 L;","void main() {","vec4 worldPos = worldMatrix * vec4(vertexPosition, 1.0);","N = (worldMatrix * vec4(vertexNormal, 0.0)).xyz;","L = lightPosition - worldPos.xyz;","V = cameraPosition - worldPos.xyz;","gl_Position = projectionMatrix * viewMatrix * worldPos;","}"].join("\n"),fshader:["uniform vec4 HighlightColor;","uniform vec4 MidColor;","uniform vec4 ShadowColor;","uniform float HighlightSize;","uniform float ShadowSize;","uniform float OutlineWidth;","varying vec3 N;","varying vec3 L;","varying vec3 V;","void main() {","vec3 n = normalize(N);","vec3 l = normalize(L);","vec3 v = normalize(V);","float lambert = dot(l,n);","vec4 color = MidColor;","if (lambert > 1.0 - HighlightSize) color = HighlightColor;","if (lambert < ShadowSize) color = ShadowColor;","if (dot(n,v) < OutlineWidth) color = vec4(0.0,0.0,0.0,1.0);","gl_FragColor = color;","}"].join("\n")},d.differenceOfGaussians={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,gaussBlurredImage1:"BLUR1",gaussBlurredImage2:"BLUR2",originalImage:"ORIGINAL",threshold:.01,edgeColor:[1,0,1,1],backgroundColor:[0,0,0,1],backgroundMix:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 texCoord0;","void main(void) {","texCoord0 = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","}"].join("\n"),
fshader:["uniform sampler2D gaussBlurredImage1;","uniform sampler2D gaussBlurredImage2;","uniform sampler2D originalImage;","uniform float threshold;","uniform float backgroundMix;","uniform vec4 edgeColor;","uniform vec4 backgroundColor;","varying vec2 texCoord0;","void main(void)","{","vec4 blur1 = texture2D(gaussBlurredImage1, texCoord0);","vec4 blur2 = texture2D(gaussBlurredImage2, texCoord0);","vec4 originalColor = texture2D(originalImage, texCoord0);","vec3 nonEdgeColor = mix(originalColor.rgb, backgroundColor.rgb, backgroundMix);","vec3 diffColor = abs(blur1.rgb - blur2.rgb);","float edgeValue = (diffColor.r + diffColor.g + diffColor.b) / 3.0;","edgeValue = smoothstep(0.0, threshold, edgeValue);","vec3 outputColor = mix(nonEdgeColor, edgeColor.rgb, edgeValue);","gl_FragColor = vec4(outputColor, 1.0);","}"].join("\n")},d.overlay={defines:{OVERLAY_TYPE:0},processors:[function(a,b){var c=b.material._textureMaps.OVERLAY_MAP;if(c){a.setDefine("OVERLAY_MAP",!0);var d=a.uniforms.offsetRepeat;d[0]=c.offset.x,d[1]=c.offset.y,d[2]=c.repeat.x,d[3]=c.repeat.y}else a.removeDefine("OVERLAY_MAP")}],attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,tDiffuse2:"OVERLAY_MAP",offsetRepeat:[0,0,1,1],amount:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:[g.blendmodes,"#define Mixin(base, blend, type, a)	mix(base, type(base, blend), a);","uniform sampler2D tDiffuse;","uniform sampler2D tDiffuse2;","uniform float amount;","#ifdef OVERLAY_MAP","uniform vec4 offsetRepeat;","#endif","varying vec2 vUv;","void main() {","gl_FragColor = texture2D(tDiffuse, vUv);","#ifdef OVERLAY_MAP","vec2 oUv = vUv * offsetRepeat.zw + offsetRepeat.xy;","vec4 blendTexture = texture2D(tDiffuse2, oUv);","float a = amount * blendTexture.a;","#endif","#if !defined(OVERLAY_MAP)","#elif OVERLAY_TYPE == 0","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendNormal, a);","#elif OVERLAY_TYPE == 1","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendLighten, a);","#elif OVERLAY_TYPE == 2","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendDarken, a);","#elif OVERLAY_TYPE == 3","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendMultiply, a);","#elif OVERLAY_TYPE == 4","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendAverage, a);","#elif OVERLAY_TYPE == 5","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendAdd, a);","#elif OVERLAY_TYPE == 6","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendSubstract, a);","#elif OVERLAY_TYPE == 7","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendDifference, a);","#elif OVERLAY_TYPE == 8","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendNegation, a);","#elif OVERLAY_TYPE == 9","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendExclusion, a);","#elif OVERLAY_TYPE == 10","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendScreen, a);","#elif OVERLAY_TYPE == 11","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendOverlay, a);","#elif OVERLAY_TYPE == 12","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendSoftLight, a);","#elif OVERLAY_TYPE == 13","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendHardLight, a);","#elif OVERLAY_TYPE == 14","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendColorDodge, a);","#elif OVERLAY_TYPE == 15","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendColorBurn, a);","#elif OVERLAY_TYPE == 16","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendLinearLight, a);","#elif OVERLAY_TYPE == 17","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendVividLight, a);","#elif OVERLAY_TYPE == 18","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendPinLight, a);","#elif OVERLAY_TYPE == 19","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendHardMix, a);","#elif OVERLAY_TYPE == 20","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendReflect, a);","#elif OVERLAY_TYPE == 21","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendGlow, a);","#elif OVERLAY_TYPE == 22","gl_FragColor.rgb = Mixin(gl_FragColor.rgb, blendTexture.rgb, BlendPhoenix, a);","#endif","}"].join("\n")},d.levels={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,gamma:1,minInput:0,maxInput:1,minOutput:0,maxOutput:1},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:[g.blendmodes,"uniform sampler2D tDiffuse;","uniform float gamma;","uniform float minInput;","uniform float maxInput;","uniform float minOutput;","uniform float maxOutput;","varying vec2 vUv;","void main() {","gl_FragColor = texture2D( tDiffuse, vUv );","gl_FragColor.rgb = LevelsControl(gl_FragColor.rgb, minInput, gamma, maxInput, minOutput, maxOutput);","}"].join("\n")},d.boxfilter={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,viewport:[128,128]},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 vUv;","void main() {","vUv = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform vec2 viewport;","varying vec2 vUv;","void main() {","vec3 result = vec3(0.0);","for (int x=-1; x<=1; x++) {","for (int y=-1; y<=1; y++) {","result += texture2D(tDiffuse, vUv + vec2(x, y) / viewport).rgb;","}","}","gl_FragColor = vec4(result / vec3(9.0), 1.0);","}"].join("\n")},d.radial={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,frameBufSize:f.RESOLUTION,offset:.5,multiplier:-.75},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 texCoords;","void main() {","texCoords = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform vec2 frameBufSize;","uniform float offset;","uniform float multiplier;","varying vec2 texCoords;","void main() {","vec2 uv = texCoords - 0.5;","vec3 o = texture2D(tDiffuse, 0.5 + (uv.xy *= 0.992)).rgb;","float z = 0.0;","for (float i = 0.0; i < 50.0; i++) {","vec3 T = texture2D(tDiffuse, 0.5 + (uv.xy *= 0.992)).rgb;","z += pow(max(0.0, offset + length(T) * multiplier), 2.0) * exp(-i * 0.08);","}","gl_FragColor = vec4(o*o + z, 1.0);","}"].join("\n")},d.packDepth={attributes:{vertexPosition:e.POSITION},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,farPlane:f.FAR_PLANE},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 vPosition;","void main(void) {","vPosition = viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","gl_Position = projectionMatrix * vPosition;","}"].join("\n"),fshader:["uniform float farPlane;",g.methods.packDepth,"varying vec4 vPosition;","void main(void)","{","float linearDepth = min(length(vPosition), farPlane) / farPlane;","gl_FragColor = packDepth(linearDepth);","}"].join("\n")},d.antialias={attributes:{vertexPosition:e.POSITION,vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,tDiffuse:f.DIFFUSE_MAP,frameBufSize:f.RESOLUTION,FXAA_SPAN_MAX:8,FXAA_REDUCE_MUL:1/8},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 texCoords;","void main() {","texCoords = vertexUV0;","gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4( vertexPosition, 1.0 );","}"].join("\n"),fshader:["uniform sampler2D tDiffuse;","uniform vec2 frameBufSize;","uniform float FXAA_SPAN_MAX;","uniform float FXAA_REDUCE_MUL;","varying vec2 texCoords;","void main() {","float FXAA_REDUCE_MIN = 1.0/128.0;","vec3 rgbNW = texture2D(tDiffuse, texCoords + (vec2(-1.0, -1.0) / frameBufSize)).xyz;","vec3 rgbNE = texture2D(tDiffuse, texCoords + (vec2(1.0, -1.0) / frameBufSize)).xyz;","vec3 rgbSW = texture2D(tDiffuse, texCoords + (vec2(-1.0, 1.0) / frameBufSize)).xyz;","vec3 rgbSE = texture2D(tDiffuse, texCoords + (vec2(1.0, 1.0) / frameBufSize)).xyz;","vec3 rgbM = texture2D(tDiffuse, texCoords).xyz;","vec3 luma=vec3(0.299, 0.587, 0.114);","float lumaNW = dot(rgbNW, luma);","float lumaNE = dot(rgbNE, luma);","float lumaSW = dot(rgbSW, luma);","float lumaSE = dot(rgbSE, luma);","float lumaM  = dot(rgbM,  luma);","float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));","float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));","vec2 dir;","dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));","dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));","float dirReduce = max(","		(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),","		FXAA_REDUCE_MIN);","float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);","dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),","		  max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),","		  dir * rcpDirMin)) / frameBufSize;","vec3 rgbA = (1.0/2.0) * (","		texture2D(tDiffuse, texCoords.xy + dir * (1.0/3.0 - 0.5)).xyz +","		texture2D(tDiffuse, texCoords.xy + dir * (2.0/3.0 - 0.5)).xyz);","vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (","		texture2D(tDiffuse, texCoords.xy + dir * (0.0/3.0 - 0.5)).xyz +","		texture2D(tDiffuse, texCoords.xy + dir * (3.0/3.0 - 0.5)).xyz);","float lumaB = dot(rgbB, luma);","if ((lumaB < lumaMin) || (lumaB > lumaMax)) {","		gl_FragColor.xyz=rgbA;","} else{","		gl_FragColor.xyz=rgbB;","}","}"].join("\n")},a.exports=d},437:function(a,b,c){function d(a){a=a||{},this.target=void 0!==a.target?a.target:null;var b=void 0!==a.strength?a.strength:1,c=void 0!==a.sigma?a.sigma:4,d=2*Math.ceil(3*c)+1;this.downsampleAmount=void 0!==a.downsampleAmount?Math.max(a.downsampleAmount,1):4,this.blurX=[.001953125,0],this.blurY=[0,.001953125];var g=window.innerWidth||1024,j=window.innerHeight||1024;this.updateSize({x:0,y:0,width:g,height:j}),this.renderable={meshData:f.quad,materials:[]},this.copyMaterial=new e(i.copyPure),this.copyMaterial.uniforms.opacity=b,this.copyMaterial.blendState.blending="CustomBlending",this.convolutionShader=h.deepClone(i.convolution),this.convolutionShader.defines={KERNEL_SIZE_FLOAT:d.toFixed(1),KERNEL_SIZE_INT:d.toFixed(0)},this.convolutionShader.uniforms.uImageIncrement=this.blurX,this.convolutionShader.uniforms.cKernel=this.convolutionShader.buildKernel(c),this.convolutionMaterial=new e(this.convolutionShader),this.enabled=!0,this.clear=!1,this.needsSwap=!1}var e=c(30),f=c(136),g=c(133),h=c(6),i=c(46),j=c(137);d.prototype=Object.create(j.prototype),d.prototype.constructor=d,d.prototype.destroy=function(a){this.renderTargetX&&this.renderTargetX.destroy(a.context),this.renderTargetY&&this.renderTargetY.destroy(a.context),this.convolutionMaterial.shader.destroy(),this.copyMaterial.shader.destroy()},d.prototype.invalidateHandles=function(a){a.invalidateMaterial(this.convolutionMaterial),a.invalidateMaterial(this.copyMaterial),a.invalidateRenderTarget(this.renderTargetX),a.invalidateRenderTarget(this.renderTargetY),a.invalidateMeshData(this.renderable.meshData)},d.prototype.updateSize=function(a,b){var c=a.width/this.downsampleAmount,d=a.height/this.downsampleAmount;this.renderTargetX&&b._deallocateRenderTarget(this.renderTargetX),this.renderTargetY&&b._deallocateRenderTarget(this.renderTargetY),this.renderTargetX=new g(c,d),this.renderTargetY=new g(c,d)},d.prototype.render=function(a,b,c){this.renderable.materials[0]=this.convolutionMaterial,this.convolutionMaterial.setTexture("DIFFUSE_MAP",c),this.convolutionMaterial.uniforms.uImageIncrement=this.blurY,a.render(this.renderable,f.camera,[],this.renderTargetX,!0),this.convolutionMaterial.setTexture("DIFFUSE_MAP",this.renderTargetX),this.convolutionMaterial.uniforms.uImageIncrement=this.blurX,a.render(this.renderable,f.camera,[],this.renderTargetY,!0),this.renderable.materials[0]=this.copyMaterial,this.copyMaterial.setTexture("DIFFUSE_MAP",this.renderTargetY),null!==this.target?a.render(this.renderable,f.camera,[],this.target,this.clear):a.render(this.renderable,f.camera,[],c,this.clear)},a.exports=d},438:function(a,b,c){function d(a,b){this.depthPass=new j(a);var c=new e(n);this.depthPass.overrideMaterial=c,this.blurTarget=new f(256,256),this.blurPass=new m({target:this.blurTarget});var d=b||o;this.outPass=new k(d),this.outPass.useReadBuffer=!1;var g=window.innerWidth||1,h=window.innerHeight||1;this.depthTarget=new f(g,h),this.enabled=!0,this.clear=!1,this.needsSwap=!0}var e=c(30),f=c(133),g=c(14),h=c(31),i=c(47),j=c(372),k=c(135),l=c(137),m=c(437);d.prototype=Object.create(l.prototype),d.prototype.constructor=d,d.prototype.render=function(a,b,c,d){this.depthPass.render(a,null,this.depthTarget,d),this.blurPass.render(a,b,c,d),this.outPass.material.setTexture(h.DEPTH_MAP,this.depthTarget),this.outPass.material.setTexture(h.DIFFUSE_MAP,c),this.outPass.material.setTexture("BLUR_MAP",this.blurTarget),this.outPass.render(a,b,c,d)};var n={attributes:{vertexPosition:g.POSITION},uniforms:{viewMatrix:h.VIEW_MATRIX,projectionMatrix:h.PROJECTION_MATRIX,worldMatrix:h.WORLD_MATRIX,farPlane:h.FAR_PLANE},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 vPosition;","void main(void) {","	vPosition = viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","	gl_Position = projectionMatrix * vPosition;","}"].join("\n"),fshader:["precision mediump float;","uniform float farPlane;",i.methods.packDepth,"varying vec4 vPosition;","void main(void)","{","	float linearDepth = min(length(vPosition), farPlane) / farPlane;","	gl_FragColor = packDepth(linearDepth);","}"].join("\n")},o={attributes:{vertexPosition:g.POSITION,vertexUV0:g.TEXCOORD0},uniforms:{viewMatrix:h.VIEW_MATRIX,projectionMatrix:h.PROJECTION_MATRIX,worldMatrix:h.WORLD_MATRIX,depthMap:h.DEPTH_MAP,diffuseMap:h.DIFFUSE_MAP},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec2 texCoord0;","void main(void) {","	texCoord0 = vertexUV0;","	gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","}"].join("\n"),fshader:["precision mediump float;","uniform sampler2D depthMap;","uniform sampler2D diffuseMap;","varying vec2 texCoord0;",i.methods.unpackDepth,"void main(void)","{","	vec4 depthCol = texture2D(depthMap, texCoord0);","	vec4 diffuseCol = texture2D(diffuseMap, texCoord0);","	float depth = unpackDepth(depthCol);","	gl_FragColor = diffuseCol * vec4(depth);","}"].join("\n")};a.exports=d},439:function(a,b,c){function d(a,b){this.depthPass=new j(a,function(a){return!(a instanceof l)}),this.regularPass=new j(a);var c=new e(o);this.depthPass.overrideMaterial=c;var d=b||p;this.outPass=new k(d),this.outPass.useReadBuffer=!1,this.outPass.renderToScreen=!0;var g=window.innerWidth||1,h=window.innerHeight||1,i=n.nearestPowerOfTwo(Math.max(g,h));this.depthTarget=new f(g,h),this.regularTarget=new f(i/2,i/2),this.regularTarget2=new f(g,h),this.regularTarget.generateMipmaps=!0,this.regularTarget.minFilter="Trilinear",this.enabled=!0,this.clear=!1,this.needsSwap=!0}var e=c(30),f=c(133),g=c(14),h=c(31),i=c(47),j=c(372),k=c(135),l=c(339),m=c(137),n=c(9);d.prototype=Object.create(m.prototype),d.prototype.constructor=d,d.prototype.render=function(a,b,c,d){this.depthPass.render(a,null,this.depthTarget,d),this.regularPass.render(a,null,this.regularTarget,d),this.regularPass.render(a,null,this.regularTarget2,d),this.outPass.material.setTexture(h.DEPTH_MAP,this.depthTarget),this.outPass.material.setTexture(h.DIFFUSE_MAP,this.regularTarget),this.outPass.material.setTexture("DIFFUSE_MIP",this.regularTarget2),this.outPass.render(a,b,c,d)};var o={attributes:{vertexPosition:g.POSITION},uniforms:{viewMatrix:h.VIEW_MATRIX,projectionMatrix:h.PROJECTION_MATRIX,worldMatrix:h.WORLD_MATRIX,farPlane:h.FAR_PLANE},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 vPosition;","void main(void) {","  vPosition = viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","  gl_Position = projectionMatrix * vPosition;","}"].join("\n"),fshader:["precision mediump float;","uniform float farPlane;",i.methods.packDepth,"varying vec4 vPosition;","void main(void)","{","  float linearDepth = min(-vPosition.z, farPlane) / farPlane;","  gl_FragColor = packDepth(linearDepth);","}"].join("\n")},p={attributes:{vertexPosition:g.POSITION,vertexUV0:g.TEXCOORD0},uniforms:{worldMatrix:h.WORLD_MATRIX,viewProjectionMatrix:h.VIEW_PROJECTION_MATRIX,depthMap:h.DEPTH_MAP,diffuseMap:h.DIFFUSE_MAP,diffuseMip:"DIFFUSE_MIP",zfar:h.FAR_PLANE,focalDepth:100,fStop:2,CoC:.003,focalLength:75,maxBlur:16},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewProjectionMatrix;","uniform mat4 worldMatrix;","varying vec2 texCoord0;","void main(void) {","  texCoord0 = vertexUV0;","  gl_Position = viewProjectionMatrix * worldMatrix * vec4(vertexPosition, 1.0);","}"].join("\n"),fshader:"uniform sampler2D diffuseMap;\nuniform sampler2D diffuseMip;\nuniform sampler2D depthMap;\nuniform float zfar; //camera clipping end\nuniform float focalDepth;\nuniform float focalLength;\nuniform float fStop;\nuniform float CoC;\nuniform float maxBlur;\nvarying vec2 texCoord0;\n"+i.methods.unpackDepth+"void main() {\nfloat depth = unpackDepth(texture2D(depthMap,texCoord0)) * zfar;\nfloat f = focalLength; //focal length in mm\nfloat d = focalDepth*1000.0; //focal plane in mm\nfloat o = depth*1000.0; //depth in mm\nfloat a = (o*f)/(o-f);\nfloat b = (d*f)/(d-f);\nfloat c = (d-f)/(d*fStop*CoC); \nfloat blur = clamp(abs(a-b)*c, 0.0, maxBlur);\nif (blur < 0.3) {\ngl_FragColor = texture2D(diffuseMip, texCoord0);\n} else {\ngl_FragColor = texture2D(diffuseMap, texCoord0, log2(blur));\n}\ngl_FragColor.a = 1.0;}"};a.exports=d},440:function(a,b,c){function d(a){a=a||{},this.target=void 0!==a.target?a.target:null;var b=void 0!==a.width?a.width:1024,c=void 0!==a.height?a.height:1024,d=void 0!==a.sigma?a.sigma:.6,g=void 0!==a.threshold?a.threshold:.005;this.downsampleAmount=void 0!==a.downsampleAmount?Math.max(a.downsampleAmount,1):2,d>2.5&&(d=2.5),this.updateSize({width:b,height:c}),this.renderable={meshData:f.quad,materials:[]},this.convolutionShader1=h.deepClone(i.convolution),this.convolutionShader2=h.deepClone(i.convolution),this.differenceShader=h.deepClone(j.differenceOfGaussians),this.differenceShader.uniforms.threshold=g,this.differenceMaterial=new e(this.differenceShader),this.updateSigma(d),this.enabled=!0,this.clear=!1,this.needsSwap=!0}var e=c(30),f=c(136),g=c(133),h=c(6),i=c(46),j=c(436),k=c(137);d.prototype=Object.create(k.prototype),d.prototype.constructor=d,d.prototype.destroy=function(a){var b=a.context;this.convolutionMaterial1&&this.convolutionMaterial1.shader.destroy(),this.convolutionMaterial2&&this.convolutionMaterial2.shader.destroy(),this.differenceMaterial.shader.destroy(),this.gaussian1&&this.gaussian1.destroy(b),this.gaussian2&&this.gaussian2.destroy(b),this.renderTargetX&&this.renderTargetX.destroy(b),this.target&&this.target.destroy(b)},d.prototype.updateThreshold=function(a){this.differenceMaterial.shader.uniforms.threshold=a},d.prototype.updateEdgeColor=function(a){this.differenceMaterial.shader.uniforms.edgeColor=[a[0],a[1],a[2],1]},d.prototype.updateBackgroundColor=function(a){this.differenceMaterial.shader.uniforms.backgroundColor=[a[0],a[1],a[2],1]},d.prototype.updateBackgroundMix=function(a){this.differenceMaterial.shader.uniforms.backgroundMix=a},d.prototype.updateSize=function(a){var b=a.width/this.downsampleAmount,c=a.height/this.downsampleAmount;this.renderTargetX=new g(b,c),this.gaussian1=new g(b,c),this.gaussian2=new g(b,c),this.blurX=[.5/b,0],this.blurY=[0,.5/c]},d.prototype.updateSigma=function(a){var b=this.convolutionShader1.buildKernel(a),c=this.convolutionShader2.buildKernel(1.6*a),d=b.length;this.convolutionShader1.defines={KERNEL_SIZE_FLOAT:d.toFixed(1),KERNEL_SIZE_INT:d.toFixed(0)},d=c.length,this.convolutionShader2.defines={KERNEL_SIZE_FLOAT:d.toFixed(1),KERNEL_SIZE_INT:d.toFixed(0)},this.convolutionShader1.uniforms.cKernel=b,this.convolutionShader2.uniforms.cKernel=c,this.convolutionMaterial1=new e(this.convolutionShader1),this.convolutionMaterial2=new e(this.convolutionShader2)},d.prototype.render=function(a,b,c){this.renderable.materials[0]=this.convolutionMaterial1,this.convolutionMaterial1.setTexture("DIFFUSE_MAP",c),this.convolutionShader1.uniforms.uImageIncrement=this.blurX,a.render(this.renderable,f.camera,[],this.renderTargetX,!0),this.convolutionMaterial1.setTexture("DIFFUSE_MAP",this.renderTargetX),this.convolutionShader1.uniforms.uImageIncrement=this.blurY,a.render(this.renderable,f.camera,[],this.gaussian1,!0),this.renderable.materials[0]=this.convolutionMaterial2,this.convolutionMaterial2.setTexture("DIFFUSE_MAP",c),this.convolutionShader2.uniforms.uImageIncrement=this.blurX,a.render(this.renderable,f.camera,[],this.renderTargetX,!0),this.convolutionMaterial2.setTexture("DIFFUSE_MAP",this.renderTargetX),this.convolutionShader2.uniforms.uImageIncrement=this.blurY,a.render(this.renderable,f.camera,[],this.gaussian2,!0),this.renderable.materials[0]=this.differenceMaterial,this.differenceMaterial.setTexture("BLUR1",this.gaussian1),this.differenceMaterial.setTexture("BLUR2",this.gaussian2),this.differenceMaterial.setTexture("ORIGINAL",c),null!==this.target?a.render(this.renderable,f.camera,[],this.target,this.clear):a.render(this.renderable,f.camera,[],b,this.clear)},d.prototype.invalidateHandles=function(a){a.invalidateMaterial(this.convolutionMaterial1),a.invalidateMaterial(this.convolutionMaterial2),a.invalidateMaterial(this.differenceMaterial),a.invalidateMeshData(this.renderable.meshData),a.invalidateRenderTarget(this.renderTargetX),a.invalidateRenderTarget(this.gaussian1),a.invalidateRenderTarget(this.gaussian2)},a.exports=d},441:function(a,b,c){function d(){this.inPass=new i(k),this.outPass=new i(f.copyPure);var a=window.innerWidth||1024,b=window.innerHeight||1024;this.updateSize({x:0,y:0,width:a,height:b}),this.enabled=!0,this.clear=!1,this.needsSwap=!0}var e=c(31),f=c(46),g=c(14),h=c(133),i=c(135),j=c(137);d.prototype=Object.create(j.prototype),d.prototype.constructor=d,d.prototype.destroy=function(a){this.inPass.destroy(a),this.outPass.destroy(a),this.targetSwap&&(this.targetSwap[0].destroy(a.context),this.targetSwap[1].destroy(a.context),this.targetSwap=void 0)},d.prototype.invalidateHandles=function(a){this.inPass.invalidateHandles(a),this.outPass.invalidateHandles(a),a.invalidateRenderTarget(this.targetSwap[0]),a.invalidateRenderTarget(this.targetSwap[1])},d.prototype.updateSize=function(a,b){var c=a.width,d=a.height;if(this.targetSwap)for(var e=0;e<this.targetSwap.length;e++)b._deallocateRenderTarget(this.targetSwap[e]);this.targetSwap=[new h(c,d),new h(c,d)]},d.prototype.render=function(a,b,c){this.inPass.material.setTexture("MOTION_MAP",this.targetSwap[1]),this.inPass.render(a,this.targetSwap[0],c),this.outPass.render(a,b,this.targetSwap[0]),this.targetSwap.reverse()};var k={defines:{},processors:[function(a,b){b.material._textureMaps.MOTION_MAP.glTexture?a.setDefine("MOTION_MAP",!0):a.removeDefine("MOTION_MAP")}],attributes:{vertexPosition:g.POSITION,vertexUV0:g.TEXCOORD0},uniforms:{viewProjectionMatrix:e.VIEW_PROJECTION_MATRIX,worldMatrix:e.WORLD_MATRIX,blend:.9,scale:1,diffuseMap:e.DIFFUSE_MAP,motionMap:"MOTION_MAP"},vshader:["attribute vec3 vertexPosition;","attribute vec2 vertexUV0;","uniform mat4 viewProjectionMatrix;","uniform mat4 worldMatrix;","varying vec2 texCoord0;","void main(void) {","  texCoord0 = vertexUV0;","  gl_Position = viewProjectionMatrix * worldMatrix * vec4(vertexPosition, 1.0);","}"].join("\n"),fshader:["uniform sampler2D diffuseMap;","uniform sampler2D motionMap;","uniform float blend;","uniform float scale;","varying vec2 texCoord0;","void main(void)","{","    vec4 colA = texture2D(diffuseMap, texCoord0);","    #ifdef MOTION_MAP","    vec4 colB = texture2D(motionMap, (texCoord0 - 0.5) / scale + 0.5);","    float wBlend = blend;// * length(colB) / sqrt(3.0);","    gl_FragColor = mix(colA, colB, wBlend);","    #else","    gl_FragColor = colA;","    #endif","}"].join("\n")};a.exports=d},442:function(a,b,c){function d(a){y.call(this),this.id=a}function e(a){A.call(this,arguments),this.id=a}function f(a){z.call(this,arguments),this.id=a}function g(a){x.call(this,C.deepClone(w.vignette)),this.id=a}function h(a){x.call(this,C.deepClone(w.sepia)),this.id=a}function i(a){x.call(this,C.deepClone(w.film)),this.id=a}function j(a){x.call(this,C.deepClone(w.noise)),this.id=a}function k(a){x.call(this,C.deepClone(w.rgbshift)),this.id=a}function l(a){x.call(this,C.deepClone(w.bleachbypass)),this.id=a}function m(a){x.call(this,C.deepClone(w.hsb)),this.id=a}function n(a){x.call(this,C.deepClone(w.colorify)),this.id=a}function o(a){x.call(this,C.deepClone(w.hatch)),this.id=a}function p(a){x.call(this,C.deepClone(w.dotscreen)),this.id=a}function q(a){x.call(this,C.deepClone(w.brightnesscontrast)),this.id=a}function r(a){B.call(this),this.id=a}function s(a){x.call(this,C.deepClone(w.antialias)),this.id=a}function t(a){x.call(this,C.deepClone(w.radial)),this.id=a}function u(a){x.call(this,C.deepClone(w.overlay)),this.id=a}function v(a){x.call(this,C.deepClone(w.levels)),this.id=a}var w=c(436),x=c(135),y=c(435),z=c(437),A=c(440),B=c(441),C=c(6);d.prototype=Object.create(y.prototype),d.prototype.constructor=d,d.prototype.update=function(a){var b=a.options||{};void 0!==b.opacity&&(this.copyMaterial.uniforms.opacity=b.opacity/100),void 0!==b.size&&(this.convolutionMaterial.uniforms.size=b.size),void 0!==b.brightness&&(this.bcMaterial.uniforms.brightness=b.brightness/100),void 0!==b.contrast&&(this.bcMaterial.uniforms.contrast=b.contrast/100),void 0!==a.enabled&&(this.enabled=a.enabled)},d.label="Bloom",d.options=[{key:"opacity",name:"Opacity",type:"int",control:"slider",min:0,max:100,"default":100},{key:"size",name:"Size",type:"float",control:"slider",min:0,max:10,decimals:1,"default":2},{key:"brightness",name:"Gain",type:"int",control:"slider",min:-100,max:100,"default":0},{key:"contrast",name:"Intensity",type:"int",control:"slider",min:-100,max:100,"default":0}],e.prototype=Object.create(A.prototype),e.prototype.constructor=e,e.prototype.update=function(a){var b=a.options||{};void 0!==a.enabled&&(this.enabled=a.enabled),void 0!==b.sigma&&this.updateSigma(b.sigma),void 0!==b.threshold&&this.updateThreshold(b.threshold),void 0!==b.edgeColor&&this.updateEdgeColor(b.edgeColor),void 0!==b.backgroundColor&&this.updateBackgroundColor(b.backgroundColor),void 0!==b.backgroundMix&&this.updateBackgroundMix(b.backgroundMix)},e.label="Edge detect",e.options=[{key:"sigma",name:"Gauss Sigma",type:"float",control:"slider",min:.01,max:1.7,decimals:2,"default":.6},{key:"threshold",name:"Threshold",type:"float",control:"slider",min:1e-14,max:.11,decimals:20,"default":.005},{key:"backgroundMix",name:"Background %",type:"float",control:"slider",min:0,max:1,decimals:2,"default":0},{key:"edgeColor",name:"Edge Color",type:"vec3",control:"color","default":[0,1,0]},{key:"backgroundColor",name:"Background Color",type:"vec3",control:"color","default":[0,0,0]}],f.prototype=Object.create(z.prototype),f.prototype.constructor=f,f.prototype.update=function(a){var b=a.options||{};void 0!==b.opacity&&(this.copyMaterial.uniforms.opacity=b.opacity/100),void 0!==b.size&&(this.blurX=[.001953125*b.size,0],this.blurY=[0,.001953125*b.size]),void 0!==a.enabled&&(this.enabled=a.enabled)},f.label="Blur",f.options=[{key:"opacity",name:"Amount",type:"int",control:"slider",min:0,max:100,"default":100},{key:"size",name:"Size",type:"float",control:"slider",min:0,max:5,decimals:1,"default":1}],g.prototype=Object.create(x.prototype),g.prototype.construcor=g,g.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.offset&&(c.uniforms.offset=b.offset),void 0!==b.darkness&&(c.uniforms.darkness=b.darkness),void 0!==a.enabled&&(this.enabled=a.enabled)},g.label="Vignette",g.options=[{key:"offset",type:"float",control:"slider",name:"Offset",min:0,max:10,decimals:1,"default":1},{key:"darkness",type:"float",control:"slider",name:"Darkness",min:0,max:2,decimals:2,"default":1.5}],h.prototype=Object.create(x.prototype),h.prototype.constructor=h,h.prototype.update=function(a){var b=a.options;void 0!==b.amount&&(this.material.uniforms.amount=b.amount/100),void 0!==a.enabled&&(this.enabled=a.enabled)},h.label="Sepia",h.options=[{key:"amount",name:"Amount",type:"int",control:"slider",min:0,max:100,"default":100}],i.prototype=Object.create(x.prototype),i.prototype.constructor=i,i.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.nIntensity&&(c.uniforms.nIntensity=b.nIntensity/100),void 0!==b.sIntensity&&(c.uniforms.sIntensity=b.sIntensity/100),void 0!==b.sCount&&(c.uniforms.sCount=b.sCount),void 0!==a.enabled&&(this.enabled=a.enabled)},i.label="Film Grain",i.options=[{key:"nIntensity",type:"int",control:"slider",name:"Noise",min:0,max:100,"default":50},{key:"sIntensity",type:"int",control:"slider",name:"Line Intensity",min:0,max:100,"default":50},{key:"sCount",type:"int",control:"slider",name:"Line Count",min:1,max:4096,"default":1024}],j.prototype=Object.create(x.prototype),j.prototype.constructor=j,j.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.nIntensity&&(c.uniforms.nIntensity=b.nIntensity/100),void 0!==a.enabled&&(this.enabled=a.enabled)},j.label="Noise",j.options=[{key:"nIntensity",type:"int",control:"slider",name:"Noise",min:0,max:100,"default":50}],k.prototype=Object.create(x.prototype),k.prototype.constructor=k,k.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.amount&&(c.uniforms.amount=b.amount),void 0!==b.angle&&(c.uniforms.angle=b.angle),void 0!==a.enabled&&(this.enabled=a.enabled)},k.label="RgbShift",k.options=[{key:"amount",type:"float",control:"slider",name:"Amount",min:0,max:.05,decimals:3,"default":.005},{key:"angle",type:"float",control:"slider",name:"Angle",min:0,max:6.28,decimals:1,"default":0}],l.prototype=Object.create(x.prototype),l.prototype.constructor=l,l.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.opacity&&(c.uniforms.opacity=b.opacity),void 0!==a.enabled&&(this.enabled=a.enabled)},l.label="Bleach",l.options=[{key:"opacity",type:"float",control:"slider",name:"Opacity",min:0,max:1,decimals:2,"default":1}],m.prototype=Object.create(x.prototype),m.prototype.constructor=m,m.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.hue&&(c.uniforms.hue=b.hue),
void 0!==b.saturation&&(c.uniforms.saturation=b.saturation),void 0!==b.brightness&&(c.uniforms.brightness=b.brightness),void 0!==a.enabled&&(this.enabled=a.enabled)},m.label="HSB",m.options=[{key:"hue",type:"float",control:"slider",name:"Hue",min:-1,max:1,decimals:2,"default":0},{key:"saturation",type:"float",control:"slider",name:"Saturation",min:-1,max:1,decimals:2,"default":0},{key:"brightness",type:"float",control:"slider",name:"Brightness",min:-1,max:1,decimals:2,"default":0}],n.prototype=Object.create(x.prototype),n.prototype.constructor=n,n.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.color&&(c.uniforms.color=b.color),void 0!==b.amount&&(c.uniforms.amount=b.amount),void 0!==a.enabled&&(this.enabled=a.enabled)},n.label="Tint",n.options=[{key:"color",type:"vec3",control:"color",name:"Color","default":[1,1,1]},{key:"amount",type:"float",control:"slider",name:"Amount",min:0,max:1,decimals:2,"default":1}],o.prototype=Object.create(x.prototype),o.prototype.constructor=o,o.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.width&&(c.uniforms.width=b.width),void 0!==b.spread&&(c.uniforms.spread=b.spread),void 0!==a.enabled&&(this.enabled=a.enabled)},o.label="Hatch",o.options=[{key:"width",type:"float",control:"slider",name:"Width",min:0,max:10,decimals:1,"default":2},{key:"spread",type:"int",control:"slider",name:"Spread",min:1,max:50,"default":8}],p.prototype=Object.create(x.prototype),p.prototype.constructor=p,p.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.angle&&(c.uniforms.angle=b.angle),void 0!==b.scale&&(c.uniforms.scale=b.scale),void 0!==b.sizex&&(c.uniforms.tSize[0]=b.sizex),void 0!==b.sizey&&(c.uniforms.tSize[1]=b.sizey),void 0!==a.enabled&&(this.enabled=a.enabled)},p.label="Dot",p.options=[{key:"angle",type:"float",control:"slider",name:"Angle",min:0,max:10,decimals:2,"default":1.57},{key:"scale",type:"float",control:"slider",name:"Scale",min:0,max:10,decimals:2,"default":1},{key:"sizex",type:"int",control:"slider",name:"SizeX",min:0,max:1024,"default":256},{key:"sizey",type:"int",control:"slider",name:"SizeY",min:0,max:1024,"default":256}],q.prototype=Object.create(x.prototype),q.prototype.constructor=q,q.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.brightness&&(c.uniforms.brightness=b.brightness),void 0!==b.contrast&&(c.uniforms.contrast=b.contrast),void 0!==b.saturation&&(c.uniforms.saturation=b.saturation),void 0!==a.enabled&&(this.enabled=a.enabled)},q.label="Contrast",q.options=[{key:"brightness",type:"float",control:"slider",name:"Brightness",min:-1,max:1,decimals:2,"default":0},{key:"contrast",type:"float",control:"slider",name:"Contrast",min:0,max:1,"default":0},{key:"saturation",type:"float",control:"slider",name:"Saturation",min:-1,max:1,decimals:2,"default":0}],r.prototype=Object.create(B.prototype),r.prototype.constructor=r,r.prototype.update=function(a){var b=a.options,c=this.inPass.material.shader;void 0!==b.blend&&(c.uniforms.blend=b.blend),void 0!==b.scale&&(c.uniforms.scale=b.scale),void 0!==a.enabled&&(this.enabled=a.enabled)},r.label="Motion Blur",r.options=[{key:"blend",type:"float",control:"slider",name:"Amount",min:0,max:1,"default":.5},{key:"scale",type:"float",name:"Scale",min:.2,"default":1,scale:.01}],s.prototype=Object.create(x.prototype),s.prototype.constructor=s,s.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.span&&(c.uniforms.FXAA_SPAN_MAX=b.span,c.uniforms.FXAA_REDUCE_MUL=1/b.span),void 0!==a.enabled&&(this.enabled=a.enabled)},s.label="Antialias",s.options=[{key:"span",type:"int",control:"slider",name:"Span",min:0,max:16,"default":8}],t.prototype=Object.create(x.prototype),t.prototype.constructor=t,t.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.offset&&(c.uniforms.offset=b.offset),void 0!==b.multiplier&&(c.uniforms.multiplier=b.multiplier),void 0!==a.enabled&&(this.enabled=a.enabled)},t.label="Radial",t.options=[{key:"offset",type:"float",control:"slider",name:"Offset",min:-1,max:1,decimals:2,"default":-.5},{key:"multiplier",type:"float",control:"slider",name:"Multiplier",min:-1,max:1,decimals:2,"default":.75}],u.prototype=Object.create(x.prototype),u.prototype.constructor=u,u.blendmodes=["Normal","Lighten","Darken","Multiply","Average","Add","Substract","Difference","Negation","Exclusion","Screen","Overlay","SoftLight","HardLight","ColorDodge","ColorBurn","LinearLight","VividLight","PinLight","HardMix","Reflect","Glow","Phoenix"],u.prototype.update=function(a){var b=a.options,c=this.material.shader;if(void 0!==b.blendmode){var d=u.blendmodes.indexOf(b.blendmode);d!==c.defines.OVERLAY_TYPE&&(c.setDefine("OVERLAY_TYPE",d),c.uniforms.amount=b.amount-.01)}void 0!==b.amount&&(c.uniforms.amount=b.amount),null!=b.url?this.material.setTexture("OVERLAY_MAP",b.url):this.material.removeTexture("OVERLAY_MAP"),void 0!==a.enabled&&(this.enabled=a.enabled)},u.label="Overlay",u.options=[{key:"url",name:"Texture",type:"texture","default":{enabled:!0}},{key:"blendmode",name:"Blend Mode",type:"string",control:"select",options:u.blendmodes,"default":"Normal"},{key:"amount",name:"Amount",type:"float",control:"slider",min:0,max:1,decimals:2,"default":1}],v.prototype=Object.create(x.prototype),v.prototype.constructor=v,v.prototype.update=function(a){var b=a.options,c=this.material.shader;void 0!==b.gamma&&(c.uniforms.gamma=b.gamma),void 0!==b.gamma&&(c.uniforms.gamma=b.gamma),void 0!==b.minInput&&(c.uniforms.minInput=b.minInput),void 0!==b.maxInput&&(c.uniforms.maxInput=b.maxInput),void 0!==b.minOutput&&(c.uniforms.minOutput=b.minOutput),void 0!==b.maxOutput&&(c.uniforms.maxOutput=b.maxOutput),void 0!==a.enabled&&(this.enabled=a.enabled)},v.label="Levels",v.options=[{key:"gamma",type:"float",control:"slider",name:"Gamma",min:0,max:5,decimals:2,"default":1},{key:"minInput",type:"float",control:"slider",name:"Min Input",min:0,max:1,decimals:2,"default":0},{key:"maxInput",type:"float",control:"slider",name:"Max Input",min:0,max:1,decimals:2,"default":1},{key:"minOutput",type:"float",control:"slider",name:"Min Output",min:0,max:1,decimals:2,"default":0},{key:"maxOutput",type:"float",control:"slider",name:"Max Output",min:0,max:1,decimals:2,"default":1}],a.exports={Bloom:d,Blur:f,Vignette:g,Sepia:h,Grain:i,Noise:j,RgbShift:k,Bleach:l,HSB:m,Colorify:n,Hatch:o,Dot:p,Contrast:q,DiffOfGaussians:e,MotionBlur:r,Antialias:s,Radial:t,Overlay:u,Levels:v}},443:function(a,b,c){function d(){e.apply(this,arguments),this._composer=new i;var a=this.world.getSystem("RenderSystem");this._renderPass=new j(a.renderList),this._outPass=new k(h.deepClone(l.copy)),this._outPass.renderToScreen=!0}var e=c(85),f=c(86),g=c(55),h=c(6),i=c(311),j=c(372),k=c(135),l=c(46),m=c(442);d.prototype=Object.create(e.prototype),d.prototype.constructor=d,e._registerClass("posteffects",d),d.prototype._remove=function(a){var b=this.world.getSystem("RenderSystem");f.remove(b.composers,this._composer),this._objects["delete"](a),this.world&&this._composer.destroy(this.world.gooRunner.renderer),this._composer=new i},d.prototype._create=function(){return[]},d.prototype._update=function(a,b,c){var d=this;return e.prototype._update.call(this,a,b,c).then(function(a){if(a){var e=a.slice(),f=[];return h.forEach(b.posteffects,function(a){f.push(d._updateEffect(a,e,c))},null,"sortValue"),g.all(f).then(function(b){for(var c=0;c<b.length;c++)a[c]=b[c];return a.length=c,a})}}).then(function(a){if(a){var b=a.some(function(a){return a.enabled}),c=d.world.getSystem("RenderSystem"),e=d._composer;if(b){e.passes=[],e.addPass(d._renderPass);for(var g=0;g<a.length;g++){var h=a[g];h&&h.enabled&&e.addPass(a[g],d.world.gooRunner.renderer)}e.addPass(d._outPass),-1===c.composers.indexOf(e)&&c.composers.push(e)}else f.remove(c.composers,d._composer);return a}})},d.prototype._updateEffect=function(a,b,c){function d(a,b){return i._load(b,c).then(function(b){f.options[a]=b})}for(var e,f=h.deepClone(a),i=this,j=0;j<b.length;j++)if(b[j].id===f.id){e=b[j];break}if(!e){if(!m[f.type])return null;e=new m[f.type](f.id)}for(var k=[],j=0;j<m[f.type].options.length;j++){var l=m[f.type].options[j],n=l.key,o=l.type;"texture"===o?f.options[n]&&f.options[n].textureRef&&f.options[n].enabled?k.push(d(n,f.options[n].textureRef)):f.options[n]=null:"entity"===o&&(f.options[n]&&f.options[n].entityRef&&f.options[n].enabled?k.push(d(n,f.options[n].entityRef)):f.options[n]=null)}return g.all(k).then(function(){return e.update(f),e})},a.exports=d},444:function(a,b,c){function d(a){this.depthPass=new k(a),this.depthPass.clearColor.setDirect(1,1,1,1);var b=new e(p);this.depthPass.overrideMaterial=b,this.downsampleAmount=4;var c=window.innerWidth||1024,d=window.innerHeight||1024;this.updateSize({x:0,y:0,width:c,height:d}),this.enabled=!0,this.clear=!1,this.needsSwap=!0}var e=c(30),f=c(133),g=c(6),h=c(14),i=c(31),j=c(47),k=c(372),l=c(135),m=c(437),n=c(436),o=c(137);d.prototype=Object.create(o.prototype),d.prototype.constructor=d,d.prototype.updateSize=function(a){var b=Math.floor(a.width/this.downsampleAmount),c=Math.floor(a.height/this.downsampleAmount),d=g.deepClone(n.ssao);d.uniforms.size=[b,c],this.outPass=new l(d),this.outPass.useReadBuffer=!1,this.blurPass=new m({sizeX:b,sizeY:c}),this.depthTarget=new f(b,c,{magFilter:"NearestNeighbor",minFilter:"NearestNeighborNoMipMaps"}),console.log("UPDATE SSAOPASS: ",b,c)},d.prototype.render=function(a,b,c,d){this.depthPass.render(a,null,this.depthTarget,d),this.outPass.material.setTexture(i.DIFFUSE_MAP,c),this.outPass.material.setTexture(i.DEPTH_MAP,this.depthTarget),this.outPass.render(a,b,c,d)};var p={attributes:{vertexPosition:h.POSITION},uniforms:{viewMatrix:i.VIEW_MATRIX,projectionMatrix:i.PROJECTION_MATRIX,worldMatrix:i.WORLD_MATRIX},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","void main(void) {","	gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","}"].join("\n"),fshader:["precision mediump float;",j.methods.packDepth,"void main(void) {","	gl_FragColor = packDepth(gl_FragCoord.z);","}"].join("\n")};a.exports=d}});